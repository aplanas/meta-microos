SUMMARY = "Development files for ocaml-stdcompat"
DESCRIPTION = "The ocaml-stdcompat-devel package contains libraries and signature files for \
developing applications that use ocaml-stdcompat."
LICENSE = "BSD-2-Clause"

PV = "19"

RPM_NAME = "ocaml-stdcompat-devel-19-2.4.aarch64.rpm"
RPM_HASH = "bbec8de01ff0cac61ed30a7c0b2d5f6d3c1fdd834b329c4252c5932aa8f799345ffdf833ebd2685bc95a419a91a0f908f1acd819875367849c2e9cc8f122eeba"

RPROVIDES:${PN} += "ocaml(Stdcompat) \
ocaml(Stdcompat__arg) \
ocaml(Stdcompat__arg_s) \
ocaml(Stdcompat__array) \
ocaml(Stdcompat__arrayLabels) \
ocaml(Stdcompat__arrayLabels_s) \
ocaml(Stdcompat__array_s) \
ocaml(Stdcompat__atomic) \
ocaml(Stdcompat__atomic_s) \
ocaml(Stdcompat__bool) \
ocaml(Stdcompat__bool_s) \
ocaml(Stdcompat__buffer) \
ocaml(Stdcompat__buffer_s) \
ocaml(Stdcompat__bytes) \
ocaml(Stdcompat__bytesLabels) \
ocaml(Stdcompat__bytesLabels_s) \
ocaml(Stdcompat__bytes_s) \
ocaml(Stdcompat__char) \
ocaml(Stdcompat__char_s) \
ocaml(Stdcompat__digest) \
ocaml(Stdcompat__digest_s) \
ocaml(Stdcompat__either) \
ocaml(Stdcompat__either_s) \
ocaml(Stdcompat__ephemeron) \
ocaml(Stdcompat__ephemeron_s) \
ocaml(Stdcompat__filename) \
ocaml(Stdcompat__filename_s) \
ocaml(Stdcompat__float) \
ocaml(Stdcompat__float_s) \
ocaml(Stdcompat__format) \
ocaml(Stdcompat__format_s) \
ocaml(Stdcompat__fun) \
ocaml(Stdcompat__fun_s) \
ocaml(Stdcompat__hashtbl) \
ocaml(Stdcompat__hashtbl_ext) \
ocaml(Stdcompat__hashtbl_s) \
ocaml(Stdcompat__in_channel) \
ocaml(Stdcompat__in_channel_s) \
ocaml(Stdcompat__init) \
ocaml(Stdcompat__int) \
ocaml(Stdcompat__int32) \
ocaml(Stdcompat__int32_s) \
ocaml(Stdcompat__int64) \
ocaml(Stdcompat__int64_s) \
ocaml(Stdcompat__int_s) \
ocaml(Stdcompat__lazy) \
ocaml(Stdcompat__lazy_s) \
ocaml(Stdcompat__lexing) \
ocaml(Stdcompat__lexing_s) \
ocaml(Stdcompat__list) \
ocaml(Stdcompat__listLabels) \
ocaml(Stdcompat__listLabels_s) \
ocaml(Stdcompat__list_s) \
ocaml(Stdcompat__map) \
ocaml(Stdcompat__map_s) \
ocaml(Stdcompat__moreLabels) \
ocaml(Stdcompat__moreLabels_s) \
ocaml(Stdcompat__native) \
ocaml(Stdcompat__nativeint) \
ocaml(Stdcompat__nativeint_s) \
ocaml(Stdcompat__option) \
ocaml(Stdcompat__option_s) \
ocaml(Stdcompat__out_channel) \
ocaml(Stdcompat__out_channel_s) \
ocaml(Stdcompat__pervasives) \
ocaml(Stdcompat__pervasives_s) \
ocaml(Stdcompat__printexc) \
ocaml(Stdcompat__printexc_s) \
ocaml(Stdcompat__printf) \
ocaml(Stdcompat__printf_s) \
ocaml(Stdcompat__queue) \
ocaml(Stdcompat__queue_s) \
ocaml(Stdcompat__random) \
ocaml(Stdcompat__random_s) \
ocaml(Stdcompat__result) \
ocaml(Stdcompat__result_s) \
ocaml(Stdcompat__root) \
ocaml(Stdcompat__seq) \
ocaml(Stdcompat__seq_s) \
ocaml(Stdcompat__set) \
ocaml(Stdcompat__set_s) \
ocaml(Stdcompat__stack) \
ocaml(Stdcompat__stack_s) \
ocaml(Stdcompat__stdlib) \
ocaml(Stdcompat__stdlib_s) \
ocaml(Stdcompat__string) \
ocaml(Stdcompat__stringLabels) \
ocaml(Stdcompat__stringLabels_s) \
ocaml(Stdcompat__string_s) \
ocaml(Stdcompat__sys) \
ocaml(Stdcompat__sys_s) \
ocaml(Stdcompat__tools) \
ocaml(Stdcompat__uchar) \
ocaml(Stdcompat__uchar_s) \
ocaml(Stdcompat__unit) \
ocaml(Stdcompat__unit_s) \
ocaml(Stdcompat__weak) \
ocaml(Stdcompat__weak_s) \
ocaml-stdcompat-devel \
ocaml-stdcompat-devel(aarch-64) \
ocamlfind(stdcompat) \
ocamlx(Stdcompat) \
ocamlx(Stdcompat__arg) \
ocamlx(Stdcompat__arg_s) \
ocamlx(Stdcompat__array) \
ocamlx(Stdcompat__arrayLabels) \
ocamlx(Stdcompat__arrayLabels_s) \
ocamlx(Stdcompat__array_s) \
ocamlx(Stdcompat__atomic) \
ocamlx(Stdcompat__atomic_s) \
ocamlx(Stdcompat__bool) \
ocamlx(Stdcompat__bool_s) \
ocamlx(Stdcompat__buffer) \
ocamlx(Stdcompat__buffer_s) \
ocamlx(Stdcompat__bytes) \
ocamlx(Stdcompat__bytesLabels) \
ocamlx(Stdcompat__bytesLabels_s) \
ocamlx(Stdcompat__bytes_s) \
ocamlx(Stdcompat__char) \
ocamlx(Stdcompat__char_s) \
ocamlx(Stdcompat__digest) \
ocamlx(Stdcompat__digest_s) \
ocamlx(Stdcompat__either) \
ocamlx(Stdcompat__either_s) \
ocamlx(Stdcompat__ephemeron) \
ocamlx(Stdcompat__ephemeron_s) \
ocamlx(Stdcompat__filename) \
ocamlx(Stdcompat__filename_s) \
ocamlx(Stdcompat__float) \
ocamlx(Stdcompat__float_s) \
ocamlx(Stdcompat__format) \
ocamlx(Stdcompat__format_s) \
ocamlx(Stdcompat__fun) \
ocamlx(Stdcompat__fun_s) \
ocamlx(Stdcompat__hashtbl) \
ocamlx(Stdcompat__hashtbl_ext) \
ocamlx(Stdcompat__hashtbl_s) \
ocamlx(Stdcompat__in_channel) \
ocamlx(Stdcompat__in_channel_s) \
ocamlx(Stdcompat__init) \
ocamlx(Stdcompat__int) \
ocamlx(Stdcompat__int32) \
ocamlx(Stdcompat__int32_s) \
ocamlx(Stdcompat__int64) \
ocamlx(Stdcompat__int64_s) \
ocamlx(Stdcompat__int_s) \
ocamlx(Stdcompat__lazy) \
ocamlx(Stdcompat__lazy_s) \
ocamlx(Stdcompat__lexing) \
ocamlx(Stdcompat__lexing_s) \
ocamlx(Stdcompat__list) \
ocamlx(Stdcompat__listLabels) \
ocamlx(Stdcompat__listLabels_s) \
ocamlx(Stdcompat__list_s) \
ocamlx(Stdcompat__map) \
ocamlx(Stdcompat__map_s) \
ocamlx(Stdcompat__moreLabels) \
ocamlx(Stdcompat__moreLabels_s) \
ocamlx(Stdcompat__native) \
ocamlx(Stdcompat__nativeint) \
ocamlx(Stdcompat__nativeint_s) \
ocamlx(Stdcompat__option) \
ocamlx(Stdcompat__option_s) \
ocamlx(Stdcompat__out_channel) \
ocamlx(Stdcompat__out_channel_s) \
ocamlx(Stdcompat__pervasives) \
ocamlx(Stdcompat__pervasives_s) \
ocamlx(Stdcompat__printexc) \
ocamlx(Stdcompat__printexc_s) \
ocamlx(Stdcompat__printf) \
ocamlx(Stdcompat__printf_s) \
ocamlx(Stdcompat__queue) \
ocamlx(Stdcompat__queue_s) \
ocamlx(Stdcompat__random) \
ocamlx(Stdcompat__random_s) \
ocamlx(Stdcompat__result) \
ocamlx(Stdcompat__result_s) \
ocamlx(Stdcompat__root) \
ocamlx(Stdcompat__seq) \
ocamlx(Stdcompat__seq_s) \
ocamlx(Stdcompat__set) \
ocamlx(Stdcompat__set_s) \
ocamlx(Stdcompat__stack) \
ocamlx(Stdcompat__stack_s) \
ocamlx(Stdcompat__stdlib) \
ocamlx(Stdcompat__stdlib_s) \
ocamlx(Stdcompat__string) \
ocamlx(Stdcompat__stringLabels) \
ocamlx(Stdcompat__stringLabels_s) \
ocamlx(Stdcompat__string_s) \
ocamlx(Stdcompat__sys) \
ocamlx(Stdcompat__sys_s) \
ocamlx(Stdcompat__tools) \
ocamlx(Stdcompat__uchar) \
ocamlx(Stdcompat__uchar_s) \
ocamlx(Stdcompat__unit) \
ocamlx(Stdcompat__unit_s) \
ocamlx(Stdcompat__weak) \
ocamlx(Stdcompat__weak_s)"

RDEPENDS:${PN} += "ocaml(CamlinternalFormatBasics) \
ocaml(CamlinternalLazy) \
ocaml(CamlinternalOO) \
ocaml(Stdlib) \
ocaml(Stdlib__Arg) \
ocaml(Stdlib__Array) \
ocaml(Stdlib__ArrayLabels) \
ocaml(Stdlib__Atomic) \
ocaml(Stdlib__Bool) \
ocaml(Stdlib__Buffer) \
ocaml(Stdlib__Bytes) \
ocaml(Stdlib__Callback) \
ocaml(Stdlib__Char) \
ocaml(Stdlib__Complex) \
ocaml(Stdlib__Digest) \
ocaml(Stdlib__Either) \
ocaml(Stdlib__Filename) \
ocaml(Stdlib__Float) \
ocaml(Stdlib__Format) \
ocaml(Stdlib__Fun) \
ocaml(Stdlib__Gc) \
ocaml(Stdlib__Hashtbl) \
ocaml(Stdlib__In_channel) \
ocaml(Stdlib__Int) \
ocaml(Stdlib__Int32) \
ocaml(Stdlib__Int64) \
ocaml(Stdlib__Lazy) \
ocaml(Stdlib__Lexing) \
ocaml(Stdlib__List) \
ocaml(Stdlib__Map) \
ocaml(Stdlib__MoreLabels) \
ocaml(Stdlib__Nativeint) \
ocaml(Stdlib__Obj) \
ocaml(Stdlib__Oo) \
ocaml(Stdlib__Option) \
ocaml(Stdlib__Out_channel) \
ocaml(Stdlib__Parsing) \
ocaml(Stdlib__Printexc) \
ocaml(Stdlib__Printf) \
ocaml(Stdlib__Queue) \
ocaml(Stdlib__Random) \
ocaml(Stdlib__Result) \
ocaml(Stdlib__Scanf) \
ocaml(Stdlib__Seq) \
ocaml(Stdlib__Set) \
ocaml(Stdlib__Stack) \
ocaml(Stdlib__String) \
ocaml(Stdlib__Sys) \
ocaml(Stdlib__Uchar) \
ocaml(Stdlib__Unit) \
ocaml(Stdlib__Weak) \
ocaml-stdcompat \
ocamlx(Stdlib) \
ocamlx(Stdlib__Arg) \
ocamlx(Stdlib__Array) \
ocamlx(Stdlib__Atomic) \
ocamlx(Stdlib__Bool) \
ocamlx(Stdlib__Buffer) \
ocamlx(Stdlib__Bytes) \
ocamlx(Stdlib__Callback) \
ocamlx(Stdlib__Char) \
ocamlx(Stdlib__Complex) \
ocamlx(Stdlib__Digest) \
ocamlx(Stdlib__Either) \
ocamlx(Stdlib__Filename) \
ocamlx(Stdlib__Float) \
ocamlx(Stdlib__Format) \
ocamlx(Stdlib__Fun) \
ocamlx(Stdlib__Gc) \
ocamlx(Stdlib__Hashtbl) \
ocamlx(Stdlib__In_channel) \
ocamlx(Stdlib__Int) \
ocamlx(Stdlib__Int32) \
ocamlx(Stdlib__Int64) \
ocamlx(Stdlib__Lazy) \
ocamlx(Stdlib__Lexing) \
ocamlx(Stdlib__List) \
ocamlx(Stdlib__Nativeint) \
ocamlx(Stdlib__Obj) \
ocamlx(Stdlib__Oo) \
ocamlx(Stdlib__Option) \
ocamlx(Stdlib__Out_channel) \
ocamlx(Stdlib__Parsing) \
ocamlx(Stdlib__Printexc) \
ocamlx(Stdlib__Printf) \
ocamlx(Stdlib__Queue) \
ocamlx(Stdlib__Random) \
ocamlx(Stdlib__Result) \
ocamlx(Stdlib__Scanf) \
ocamlx(Stdlib__Seq) \
ocamlx(Stdlib__Stack) \
ocamlx(Stdlib__String) \
ocamlx(Stdlib__Sys) \
ocamlx(Stdlib__Uchar) \
ocamlx(Stdlib__Unit) \
ocamlx(Stdlib__Weak)"

inherit rpm
