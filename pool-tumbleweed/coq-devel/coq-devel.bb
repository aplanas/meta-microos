SUMMARY = "Development files for coq"
DESCRIPTION = "This package contains development files for Coq."
LICENSE = "LGPL-2.1-only"

PV = "8.17.0"

RPM_NAME = "coq-devel-8.17.0-1.1.aarch64.rpm"
RPM_HASH = "00bc41e38714c0e8ae2a5e21c4095b3b75a5b63a8859f75fd16195928c94323815460d8e0c90ae40fb2153cd329333319fadf7197453abbda5f574ba1b3d0a01"

RPROVIDES:${PN} += "coq-devel \
coq-devel(aarch-64) \
ocaml(Abbreviation) \
ocaml(Abstract) \
ocaml(AcyclicGraph) \
ocaml(Arguments_renaming) \
ocaml(Assumptions) \
ocaml(AsyncTaskQueue) \
ocaml(Attributes) \
ocaml(Auto) \
ocaml(Auto_ind_decl) \
ocaml(Autorewrite) \
ocaml(Aux_file) \
ocaml(Boot) \
ocaml(Boot__Env) \
ocaml(Boot__Path) \
ocaml(Boot__Usage) \
ocaml(Boot__Util) \
ocaml(Btauto_plugin) \
ocaml(Btauto_plugin__G_btauto) \
ocaml(Btauto_plugin__Refl_btauto) \
ocaml(Btermdn) \
ocaml(CArray) \
ocaml(CAst) \
ocaml(CClosure) \
ocaml(CDebug) \
ocaml(CEphemeron) \
ocaml(CErrors) \
ocaml(CLexer) \
ocaml(CList) \
ocaml(CMap) \
ocaml(CObj) \
ocaml(CPrimitives) \
ocaml(CProfile) \
ocaml(CSet) \
ocaml(CSig) \
ocaml(CString) \
ocaml(CThread) \
ocaml(CUnix) \
ocaml(CWarnings) \
ocaml(Canonical) \
ocaml(Cases) \
ocaml(Cbn) \
ocaml(Cbv) \
ocaml(Cc_plugin) \
ocaml(Cc_plugin__Ccalgo) \
ocaml(Cc_plugin__Ccproof) \
ocaml(Cc_plugin__Cctac) \
ocaml(Cc_plugin__G_congruence) \
ocaml(Ccompile) \
ocaml(Class_tactics) \
ocaml(Classes) \
ocaml(Clenv) \
ocaml(Coercion) \
ocaml(Coercionops) \
ocaml(Colors) \
ocaml(ComArguments) \
ocaml(ComAssumption) \
ocaml(ComCoercion) \
ocaml(ComDefinition) \
ocaml(ComExtraDeps) \
ocaml(ComFixpoint) \
ocaml(ComHints) \
ocaml(ComInductive) \
ocaml(ComPrimitive) \
ocaml(ComProgramFixpoint) \
ocaml(ComSearch) \
ocaml(ComTactic) \
ocaml(Common_compile) \
ocaml(Constr) \
ocaml(Constr_matching) \
ocaml(Constrexpr) \
ocaml(Constrexpr_ops) \
ocaml(Constrextern) \
ocaml(Constrintern) \
ocaml(Context) \
ocaml(Contradiction) \
ocaml(Control) \
ocaml(Conv_oracle) \
ocaml(Cooking) \
ocaml(CoqProject_file) \
ocaml(Coq_config) \
ocaml(Coqargs) \
ocaml(Coqc) \
ocaml(Coqcargs) \
ocaml(Coqinit) \
ocaml(Coqlib) \
ocaml(Coqloadpath) \
ocaml(Coqloop) \
ocaml(Coqrc) \
ocaml(Coqrun) \
ocaml(Coqtop) \
ocaml(CoqworkmgrApi) \
ocaml(Core_plugins_findlib_compat) \
ocaml(DAst) \
ocaml(Dag) \
ocaml(DebugHook) \
ocaml(Declarations) \
ocaml(Declare) \
ocaml(DeclareInd) \
ocaml(DeclareScheme) \
ocaml(DeclareUctx) \
ocaml(DeclareUniv) \
ocaml(Declaremods) \
ocaml(Declareops) \
ocaml(Decls) \
ocaml(Deprecation) \
ocaml(Derive_plugin) \
ocaml(Derive_plugin__Derive) \
ocaml(Derive_plugin__G_derive) \
ocaml(Detyping) \
ocaml(Diff2) \
ocaml(Discharge) \
ocaml(Dn) \
ocaml(Document) \
ocaml(Dumpglob) \
ocaml(Dyn) \
ocaml(EConstr) \
ocaml(Eauto) \
ocaml(Egramcoq) \
ocaml(Egramml) \
ocaml(Elim) \
ocaml(Elimschemes) \
ocaml(Entries) \
ocaml(Envars) \
ocaml(Environ) \
ocaml(Eqdecide) \
ocaml(Eqschemes) \
ocaml(Equality) \
ocaml(Esubst) \
ocaml(Evar) \
ocaml(Evar_kinds) \
ocaml(Evar_tactics) \
ocaml(Evarconv) \
ocaml(Evardefine) \
ocaml(Evarsolve) \
ocaml(Evarutil) \
ocaml(Evd) \
ocaml(Exninfo) \
ocaml(Extend) \
ocaml(Extraction_plugin) \
ocaml(Extraction_plugin__Common) \
ocaml(Extraction_plugin__Extract_env) \
ocaml(Extraction_plugin__Extraction) \
ocaml(Extraction_plugin__G_extraction) \
ocaml(Extraction_plugin__Haskell) \
ocaml(Extraction_plugin__Json) \
ocaml(Extraction_plugin__Miniml) \
ocaml(Extraction_plugin__Mlutil) \
ocaml(Extraction_plugin__Modutil) \
ocaml(Extraction_plugin__Ocaml) \
ocaml(Extraction_plugin__Scheme) \
ocaml(Extraction_plugin__Table) \
ocaml(Feedback) \
ocaml(Find_subterm) \
ocaml(Firstorder_plugin) \
ocaml(Firstorder_plugin__Formula) \
ocaml(Firstorder_plugin__G_ground) \
ocaml(Firstorder_plugin__Ground) \
ocaml(Firstorder_plugin__Instances) \
ocaml(Firstorder_plugin__Rules) \
ocaml(Firstorder_plugin__Sequent) \
ocaml(Firstorder_plugin__Unify) \
ocaml(Flags) \
ocaml(Float64) \
ocaml(Float64_common) \
ocaml(Ftactic) \
ocaml(Funind_plugin) \
ocaml(Funind_plugin__Functional_principles_proofs) \
ocaml(Funind_plugin__Functional_principles_types) \
ocaml(Funind_plugin__G_indfun) \
ocaml(Funind_plugin__Gen_principle) \
ocaml(Funind_plugin__Glob_term_to_relation) \
ocaml(Funind_plugin__Glob_termops) \
ocaml(Funind_plugin__Indfun) \
ocaml(Funind_plugin__Indfun_common) \
ocaml(Funind_plugin__Invfun) \
ocaml(Funind_plugin__Recdef) \
ocaml(Future) \
ocaml(G_constr) \
ocaml(G_prim) \
ocaml(G_proofs) \
ocaml(G_toplevel) \
ocaml(G_vernac) \
ocaml(Genarg) \
ocaml(Genintern) \
ocaml(Geninterp) \
ocaml(Genlambda) \
ocaml(Genprint) \
ocaml(Genredexpr) \
ocaml(GlobEnv) \
ocaml(Glob_ops) \
ocaml(Glob_term) \
ocaml(Global) \
ocaml(Globnames) \
ocaml(Goal_select) \
ocaml(Goptions) \
ocaml(Gramlib) \
ocaml(Gramlib__Gramext) \
ocaml(Gramlib__Grammar) \
ocaml(Gramlib__LStream) \
ocaml(Gramlib__Plexing) \
ocaml(Gramlib__Stream) \
ocaml(HMap) \
ocaml(Hashcons) \
ocaml(Hashset) \
ocaml(Heads) \
ocaml(Heap) \
ocaml(Himsg) \
ocaml(Hints) \
ocaml(Hipattern) \
ocaml(Hook) \
ocaml(IStream) \
ocaml(Impargs) \
ocaml(Implicit_quantifiers) \
ocaml(IndTyping) \
ocaml(Ind_tables) \
ocaml(Indrec) \
ocaml(Indschemes) \
ocaml(Indtypes) \
ocaml(Inductive) \
ocaml(Inductiveops) \
ocaml(InferCumulativity) \
ocaml(Int) \
ocaml(Interface) \
ocaml(Inv) \
ocaml(Keys) \
ocaml(Lib) \
ocaml(Libnames) \
ocaml(Libobject) \
ocaml(Library) \
ocaml(Load) \
ocaml(Loadpath) \
ocaml(Loc) \
ocaml(Locality) \
ocaml(Locus) \
ocaml(Locusops) \
ocaml(Logic) \
ocaml(Logic_monad) \
ocaml(Ltac2_plugin) \
ocaml(Ltac2_plugin__G_ltac2) \
ocaml(Ltac2_plugin__Tac2core) \
ocaml(Ltac2_plugin__Tac2dyn) \
ocaml(Ltac2_plugin__Tac2entries) \
ocaml(Ltac2_plugin__Tac2env) \
ocaml(Ltac2_plugin__Tac2expr) \
ocaml(Ltac2_plugin__Tac2extffi) \
ocaml(Ltac2_plugin__Tac2ffi) \
ocaml(Ltac2_plugin__Tac2intern) \
ocaml(Ltac2_plugin__Tac2interp) \
ocaml(Ltac2_plugin__Tac2match) \
ocaml(Ltac2_plugin__Tac2print) \
ocaml(Ltac2_plugin__Tac2qexpr) \
ocaml(Ltac2_plugin__Tac2quote) \
ocaml(Ltac2_plugin__Tac2stdlib) \
ocaml(Ltac2_plugin__Tac2tactics) \
ocaml(Ltac2_plugin__Tac2types) \
ocaml(Ltac2_plugin__Tac2typing_env) \
ocaml(Ltac_plugin) \
ocaml(Ltac_plugin__ComRewrite) \
ocaml(Ltac_plugin__Coretactics) \
ocaml(Ltac_plugin__Extraargs) \
ocaml(Ltac_plugin__Extratactics) \
ocaml(Ltac_plugin__G_auto) \
ocaml(Ltac_plugin__G_class) \
ocaml(Ltac_plugin__G_eqdecide) \
ocaml(Ltac_plugin__G_ltac) \
ocaml(Ltac_plugin__G_obligations) \
ocaml(Ltac_plugin__G_rewrite) \
ocaml(Ltac_plugin__G_tactic) \
ocaml(Ltac_plugin__Internals) \
ocaml(Ltac_plugin__Leminv) \
ocaml(Ltac_plugin__Pltac) \
ocaml(Ltac_plugin__Pptactic) \
ocaml(Ltac_plugin__Profile_ltac) \
ocaml(Ltac_plugin__Profile_ltac_tactics) \
ocaml(Ltac_plugin__Tacarg) \
ocaml(Ltac_plugin__Taccoerce) \
ocaml(Ltac_plugin__Tacentries) \
ocaml(Ltac_plugin__Tacenv) \
ocaml(Ltac_plugin__Tacexpr) \
ocaml(Ltac_plugin__Tacintern) \
ocaml(Ltac_plugin__Tacinterp) \
ocaml(Ltac_plugin__Tacsubst) \
ocaml(Ltac_plugin__Tactic_debug) \
ocaml(Ltac_plugin__Tactic_matching) \
ocaml(Ltac_plugin__Tactic_option) \
ocaml(Ltac_pretype) \
ocaml(Metasyntax) \
ocaml(Micromega_plugin) \
ocaml(Micromega_plugin__Certificate) \
ocaml(Micromega_plugin__Coq_micromega) \
ocaml(Micromega_plugin__G_micromega) \
ocaml(Micromega_plugin__Itv) \
ocaml(Micromega_plugin__Linsolve) \
ocaml(Micromega_plugin__Micromega) \
ocaml(Micromega_plugin__Mutils) \
ocaml(Micromega_plugin__NumCompat) \
ocaml(Micromega_plugin__Persistent_cache) \
ocaml(Micromega_plugin__Polynomial) \
ocaml(Micromega_plugin__Simplex) \
ocaml(Micromega_plugin__Sos) \
ocaml(Micromega_plugin__Sos_lib) \
ocaml(Micromega_plugin__Sos_types) \
ocaml(Micromega_plugin__Vect) \
ocaml(Miscprint) \
ocaml(Mltop) \
ocaml(Mod_subst) \
ocaml(Mod_typing) \
ocaml(Modintern) \
ocaml(Modops) \
ocaml(Monad) \
ocaml(NCoq_Arith_Arith) \
ocaml(NCoq_Arith_Arith_base) \
ocaml(NCoq_Arith_Arith_prebase) \
ocaml(NCoq_Arith_Between) \
ocaml(NCoq_Arith_Bool_nat) \
ocaml(NCoq_Arith_Cantor) \
ocaml(NCoq_Arith_Compare) \
ocaml(NCoq_Arith_Compare_dec) \
ocaml(NCoq_Arith_Div2) \
ocaml(NCoq_Arith_EqNat) \
ocaml(NCoq_Arith_Euclid) \
ocaml(NCoq_Arith_Even) \
ocaml(NCoq_Arith_Factorial) \
ocaml(NCoq_Arith_Gt) \
ocaml(NCoq_Arith_Le) \
ocaml(NCoq_Arith_Lt) \
ocaml(NCoq_Arith_Max) \
ocaml(NCoq_Arith_Min) \
ocaml(NCoq_Arith_Minus) \
ocaml(NCoq_Arith_Mult) \
ocaml(NCoq_Arith_PeanoNat) \
ocaml(NCoq_Arith_Peano_dec) \
ocaml(NCoq_Arith_Plus) \
ocaml(NCoq_Arith_Wf_nat) \
ocaml(NCoq_Array_PArray) \
ocaml(NCoq_Bool_Bool) \
ocaml(NCoq_Bool_BoolEq) \
ocaml(NCoq_Bool_BoolOrder) \
ocaml(NCoq_Bool_Bvector) \
ocaml(NCoq_Bool_DecBool) \
ocaml(NCoq_Bool_IfProp) \
ocaml(NCoq_Bool_Sumbool) \
ocaml(NCoq_Bool_Zerob) \
ocaml(NCoq_Classes_CEquivalence) \
ocaml(NCoq_Classes_CMorphisms) \
ocaml(NCoq_Classes_CRelationClasses) \
ocaml(NCoq_Classes_DecidableClass) \
ocaml(NCoq_Classes_EquivDec) \
ocaml(NCoq_Classes_Equivalence) \
ocaml(NCoq_Classes_Init) \
ocaml(NCoq_Classes_Morphisms) \
ocaml(NCoq_Classes_Morphisms_Prop) \
ocaml(NCoq_Classes_Morphisms_Relations) \
ocaml(NCoq_Classes_RelationClasses) \
ocaml(NCoq_Classes_RelationPairs) \
ocaml(NCoq_Classes_SetoidClass) \
ocaml(NCoq_Classes_SetoidDec) \
ocaml(NCoq_Classes_SetoidTactics) \
ocaml(NCoq_Compat_AdmitAxiom) \
ocaml(NCoq_Compat_Coq815) \
ocaml(NCoq_Compat_Coq816) \
ocaml(NCoq_Compat_Coq817) \
ocaml(NCoq_FSets_FMapAVL) \
ocaml(NCoq_FSets_FMapFacts) \
ocaml(NCoq_FSets_FMapFullAVL) \
ocaml(NCoq_FSets_FMapInterface) \
ocaml(NCoq_FSets_FMapList) \
ocaml(NCoq_FSets_FMapPositive) \
ocaml(NCoq_FSets_FMapWeakList) \
ocaml(NCoq_FSets_FMaps) \
ocaml(NCoq_FSets_FSetAVL) \
ocaml(NCoq_FSets_FSetBridge) \
ocaml(NCoq_FSets_FSetCompat) \
ocaml(NCoq_FSets_FSetDecide) \
ocaml(NCoq_FSets_FSetEqProperties) \
ocaml(NCoq_FSets_FSetFacts) \
ocaml(NCoq_FSets_FSetInterface) \
ocaml(NCoq_FSets_FSetList) \
ocaml(NCoq_FSets_FSetPositive) \
ocaml(NCoq_FSets_FSetProperties) \
ocaml(NCoq_FSets_FSetToFiniteSet) \
ocaml(NCoq_FSets_FSetWeakList) \
ocaml(NCoq_FSets_FSets) \
ocaml(NCoq_Floats_FloatAxioms) \
ocaml(NCoq_Floats_FloatClass) \
ocaml(NCoq_Floats_FloatLemmas) \
ocaml(NCoq_Floats_FloatOps) \
ocaml(NCoq_Floats_Floats) \
ocaml(NCoq_Floats_PrimFloat) \
ocaml(NCoq_Floats_SpecFloat) \
ocaml(NCoq_Init_Byte) \
ocaml(NCoq_Init_Datatypes) \
ocaml(NCoq_Init_Decimal) \
ocaml(NCoq_Init_Hexadecimal) \
ocaml(NCoq_Init_Logic) \
ocaml(NCoq_Init_Ltac) \
ocaml(NCoq_Init_Nat) \
ocaml(NCoq_Init_Notations) \
ocaml(NCoq_Init_Number) \
ocaml(NCoq_Init_Peano) \
ocaml(NCoq_Init_Prelude) \
ocaml(NCoq_Init_Specif) \
ocaml(NCoq_Init_Tactics) \
ocaml(NCoq_Init_Tauto) \
ocaml(NCoq_Init_Wf) \
ocaml(NCoq_Lists_List) \
ocaml(NCoq_Lists_ListDec) \
ocaml(NCoq_Lists_ListSet) \
ocaml(NCoq_Lists_ListTactics) \
ocaml(NCoq_Lists_SetoidList) \
ocaml(NCoq_Lists_SetoidPermutation) \
ocaml(NCoq_Lists_StreamMemo) \
ocaml(NCoq_Lists_Streams) \
ocaml(NCoq_Logic_Adjointification) \
ocaml(NCoq_Logic_Berardi) \
ocaml(NCoq_Logic_ChoiceFacts) \
ocaml(NCoq_Logic_Classical) \
ocaml(NCoq_Logic_ClassicalChoice) \
ocaml(NCoq_Logic_ClassicalDescription) \
ocaml(NCoq_Logic_ClassicalEpsilon) \
ocaml(NCoq_Logic_ClassicalFacts) \
ocaml(NCoq_Logic_ClassicalUniqueChoice) \
ocaml(NCoq_Logic_Classical_Pred_Type) \
ocaml(NCoq_Logic_Classical_Prop) \
ocaml(NCoq_Logic_ConstructiveEpsilon) \
ocaml(NCoq_Logic_Decidable) \
ocaml(NCoq_Logic_Description) \
ocaml(NCoq_Logic_Diaconescu) \
ocaml(NCoq_Logic_Epsilon) \
ocaml(NCoq_Logic_Eqdep) \
ocaml(NCoq_Logic_EqdepFacts) \
ocaml(NCoq_Logic_Eqdep_dec) \
ocaml(NCoq_Logic_ExtensionalFunctionRepresentative) \
ocaml(NCoq_Logic_ExtensionalityFacts) \
ocaml(NCoq_Logic_FinFun) \
ocaml(NCoq_Logic_FunctionalExtensionality) \
ocaml(NCoq_Logic_HLevels) \
ocaml(NCoq_Logic_Hurkens) \
ocaml(NCoq_Logic_IndefiniteDescription) \
ocaml(NCoq_Logic_JMeq) \
ocaml(NCoq_Logic_ProofIrrelevance) \
ocaml(NCoq_Logic_ProofIrrelevanceFacts) \
ocaml(NCoq_Logic_PropExtensionality) \
ocaml(NCoq_Logic_PropExtensionalityFacts) \
ocaml(NCoq_Logic_PropFacts) \
ocaml(NCoq_Logic_RelationalChoice) \
ocaml(NCoq_Logic_SetIsType) \
ocaml(NCoq_Logic_SetoidChoice) \
ocaml(NCoq_Logic_StrictProp) \
ocaml(NCoq_Logic_WKL) \
ocaml(NCoq_Logic_WeakFan) \
ocaml(NCoq_MSets_MSetAVL) \
ocaml(NCoq_MSets_MSetDecide) \
ocaml(NCoq_MSets_MSetEqProperties) \
ocaml(NCoq_MSets_MSetFacts) \
ocaml(NCoq_MSets_MSetGenTree) \
ocaml(NCoq_MSets_MSetInterface) \
ocaml(NCoq_MSets_MSetList) \
ocaml(NCoq_MSets_MSetPositive) \
ocaml(NCoq_MSets_MSetProperties) \
ocaml(NCoq_MSets_MSetRBT) \
ocaml(NCoq_MSets_MSetToFiniteSet) \
ocaml(NCoq_MSets_MSetWeakList) \
ocaml(NCoq_MSets_MSets) \
ocaml(NCoq_NArith_BinNat) \
ocaml(NCoq_NArith_BinNatDef) \
ocaml(NCoq_NArith_NArith) \
ocaml(NCoq_NArith_Ndec) \
ocaml(NCoq_NArith_Ndigits) \
ocaml(NCoq_NArith_Ndist) \
ocaml(NCoq_NArith_Ndiv_def) \
ocaml(NCoq_NArith_Ngcd_def) \
ocaml(NCoq_NArith_Nnat) \
ocaml(NCoq_NArith_Nsqrt_def) \
ocaml(NCoq_Numbers_AltBinNotations) \
ocaml(NCoq_Numbers_BinNums) \
ocaml(NCoq_Numbers_Cyclic_Abstract_CarryType) \
ocaml(NCoq_Numbers_Cyclic_Abstract_CyclicAxioms) \
ocaml(NCoq_Numbers_Cyclic_Abstract_DoubleType) \
ocaml(NCoq_Numbers_Cyclic_Abstract_NZCyclic) \
ocaml(NCoq_Numbers_Cyclic_Int31_Cyclic31) \
ocaml(NCoq_Numbers_Cyclic_Int31_Int31) \
ocaml(NCoq_Numbers_Cyclic_Int31_Ring31) \
ocaml(NCoq_Numbers_Cyclic_Int63_Cyclic63) \
ocaml(NCoq_Numbers_Cyclic_Int63_PrimInt63) \
ocaml(NCoq_Numbers_Cyclic_Int63_Ring63) \
ocaml(NCoq_Numbers_Cyclic_Int63_Sint63) \
ocaml(NCoq_Numbers_Cyclic_Int63_Uint63) \
ocaml(NCoq_Numbers_Cyclic_ZModulo_ZModulo) \
ocaml(NCoq_Numbers_DecimalFacts) \
ocaml(NCoq_Numbers_DecimalN) \
ocaml(NCoq_Numbers_DecimalNat) \
ocaml(NCoq_Numbers_DecimalPos) \
ocaml(NCoq_Numbers_DecimalQ) \
ocaml(NCoq_Numbers_DecimalR) \
ocaml(NCoq_Numbers_DecimalString) \
ocaml(NCoq_Numbers_DecimalZ) \
ocaml(NCoq_Numbers_HexadecimalFacts) \
ocaml(NCoq_Numbers_HexadecimalN) \
ocaml(NCoq_Numbers_HexadecimalNat) \
ocaml(NCoq_Numbers_HexadecimalPos) \
ocaml(NCoq_Numbers_HexadecimalQ) \
ocaml(NCoq_Numbers_HexadecimalR) \
ocaml(NCoq_Numbers_HexadecimalString) \
ocaml(NCoq_Numbers_HexadecimalZ) \
ocaml(NCoq_Numbers_Integer_Abstract_ZAdd) \
ocaml(NCoq_Numbers_Integer_Abstract_ZAddOrder) \
ocaml(NCoq_Numbers_Integer_Abstract_ZAxioms) \
ocaml(NCoq_Numbers_Integer_Abstract_ZBase) \
ocaml(NCoq_Numbers_Integer_Abstract_ZBits) \
ocaml(NCoq_Numbers_Integer_Abstract_ZDivEucl) \
ocaml(NCoq_Numbers_Integer_Abstract_ZDivFloor) \
ocaml(NCoq_Numbers_Integer_Abstract_ZDivTrunc) \
ocaml(NCoq_Numbers_Integer_Abstract_ZGcd) \
ocaml(NCoq_Numbers_Integer_Abstract_ZLcm) \
ocaml(NCoq_Numbers_Integer_Abstract_ZLt) \
ocaml(NCoq_Numbers_Integer_Abstract_ZMaxMin) \
ocaml(NCoq_Numbers_Integer_Abstract_ZMul) \
ocaml(NCoq_Numbers_Integer_Abstract_ZMulOrder) \
ocaml(NCoq_Numbers_Integer_Abstract_ZParity) \
ocaml(NCoq_Numbers_Integer_Abstract_ZPow) \
ocaml(NCoq_Numbers_Integer_Abstract_ZProperties) \
ocaml(NCoq_Numbers_Integer_Abstract_ZSgnAbs) \
ocaml(NCoq_Numbers_Integer_Binary_ZBinary) \
ocaml(NCoq_Numbers_Integer_NatPairs_ZNatPairs) \
ocaml(NCoq_Numbers_NaryFunctions) \
ocaml(NCoq_Numbers_NatInt_NZAdd) \
ocaml(NCoq_Numbers_NatInt_NZAddOrder) \
ocaml(NCoq_Numbers_NatInt_NZAxioms) \
ocaml(NCoq_Numbers_NatInt_NZBase) \
ocaml(NCoq_Numbers_NatInt_NZBits) \
ocaml(NCoq_Numbers_NatInt_NZDiv) \
ocaml(NCoq_Numbers_NatInt_NZDomain) \
ocaml(NCoq_Numbers_NatInt_NZGcd) \
ocaml(NCoq_Numbers_NatInt_NZLog) \
ocaml(NCoq_Numbers_NatInt_NZMul) \
ocaml(NCoq_Numbers_NatInt_NZMulOrder) \
ocaml(NCoq_Numbers_NatInt_NZOrder) \
ocaml(NCoq_Numbers_NatInt_NZParity) \
ocaml(NCoq_Numbers_NatInt_NZPow) \
ocaml(NCoq_Numbers_NatInt_NZProperties) \
ocaml(NCoq_Numbers_NatInt_NZSqrt) \
ocaml(NCoq_Numbers_Natural_Abstract_NAdd) \
ocaml(NCoq_Numbers_Natural_Abstract_NAddOrder) \
ocaml(NCoq_Numbers_Natural_Abstract_NAxioms) \
ocaml(NCoq_Numbers_Natural_Abstract_NBase) \
ocaml(NCoq_Numbers_Natural_Abstract_NBits) \
ocaml(NCoq_Numbers_Natural_Abstract_NDefOps) \
ocaml(NCoq_Numbers_Natural_Abstract_NDiv) \
ocaml(NCoq_Numbers_Natural_Abstract_NDiv0) \
ocaml(NCoq_Numbers_Natural_Abstract_NGcd) \
ocaml(NCoq_Numbers_Natural_Abstract_NIso) \
ocaml(NCoq_Numbers_Natural_Abstract_NLcm) \
ocaml(NCoq_Numbers_Natural_Abstract_NLcm0) \
ocaml(NCoq_Numbers_Natural_Abstract_NLog) \
ocaml(NCoq_Numbers_Natural_Abstract_NMaxMin) \
ocaml(NCoq_Numbers_Natural_Abstract_NMulOrder) \
ocaml(NCoq_Numbers_Natural_Abstract_NOrder) \
ocaml(NCoq_Numbers_Natural_Abstract_NParity) \
ocaml(NCoq_Numbers_Natural_Abstract_NPow) \
ocaml(NCoq_Numbers_Natural_Abstract_NProperties) \
ocaml(NCoq_Numbers_Natural_Abstract_NSqrt) \
ocaml(NCoq_Numbers_Natural_Abstract_NStrongRec) \
ocaml(NCoq_Numbers_Natural_Abstract_NSub) \
ocaml(NCoq_Numbers_Natural_Binary_NBinary) \
ocaml(NCoq_Numbers_Natural_Peano_NPeano) \
ocaml(NCoq_Numbers_NumPrelude) \
ocaml(NCoq_PArith_BinPos) \
ocaml(NCoq_PArith_BinPosDef) \
ocaml(NCoq_PArith_PArith) \
ocaml(NCoq_PArith_POrderedType) \
ocaml(NCoq_PArith_Pnat) \
ocaml(NCoq_Program_Basics) \
ocaml(NCoq_Program_Combinators) \
ocaml(NCoq_Program_Equality) \
ocaml(NCoq_Program_Program) \
ocaml(NCoq_Program_Subset) \
ocaml(NCoq_Program_Syntax) \
ocaml(NCoq_Program_Tactics) \
ocaml(NCoq_Program_Utils) \
ocaml(NCoq_Program_Wf) \
ocaml(NCoq_QArith_QArith) \
ocaml(NCoq_QArith_QArith_base) \
ocaml(NCoq_QArith_QOrderedType) \
ocaml(NCoq_QArith_Qabs) \
ocaml(NCoq_QArith_Qcabs) \
ocaml(NCoq_QArith_Qcanon) \
ocaml(NCoq_QArith_Qfield) \
ocaml(NCoq_QArith_Qminmax) \
ocaml(NCoq_QArith_Qpower) \
ocaml(NCoq_QArith_Qreals) \
ocaml(NCoq_QArith_Qreduction) \
ocaml(NCoq_QArith_Qring) \
ocaml(NCoq_QArith_Qround) \
ocaml(NCoq_Reals_Abstract_ConstructiveAbs) \
ocaml(NCoq_Reals_Abstract_ConstructiveLUB) \
ocaml(NCoq_Reals_Abstract_ConstructiveLimits) \
ocaml(NCoq_Reals_Abstract_ConstructiveMinMax) \
ocaml(NCoq_Reals_Abstract_ConstructivePower) \
ocaml(NCoq_Reals_Abstract_ConstructiveReals) \
ocaml(NCoq_Reals_Abstract_ConstructiveRealsMorphisms) \
ocaml(NCoq_Reals_Abstract_ConstructiveSum) \
ocaml(NCoq_Reals_Alembert) \
ocaml(NCoq_Reals_AltSeries) \
ocaml(NCoq_Reals_ArithProp) \
ocaml(NCoq_Reals_Binomial) \
ocaml(NCoq_Reals_Cauchy_ConstructiveCauchyAbs) \
ocaml(NCoq_Reals_Cauchy_ConstructiveCauchyReals) \
ocaml(NCoq_Reals_Cauchy_ConstructiveCauchyRealsMult) \
ocaml(NCoq_Reals_Cauchy_ConstructiveExtra) \
ocaml(NCoq_Reals_Cauchy_ConstructiveRcomplete) \
ocaml(NCoq_Reals_Cauchy_PosExtra) \
ocaml(NCoq_Reals_Cauchy_QExtra) \
ocaml(NCoq_Reals_Cauchy_prod) \
ocaml(NCoq_Reals_ClassicalConstructiveReals) \
ocaml(NCoq_Reals_ClassicalDedekindReals) \
ocaml(NCoq_Reals_Cos_plus) \
ocaml(NCoq_Reals_Cos_rel) \
ocaml(NCoq_Reals_DiscrR) \
ocaml(NCoq_Reals_Exp_prop) \
ocaml(NCoq_Reals_Integration) \
ocaml(NCoq_Reals_MVT) \
ocaml(NCoq_Reals_Machin) \
ocaml(NCoq_Reals_NewtonInt) \
ocaml(NCoq_Reals_PSeries_reg) \
ocaml(NCoq_Reals_PartSum) \
ocaml(NCoq_Reals_RIneq) \
ocaml(NCoq_Reals_RList) \
ocaml(NCoq_Reals_ROrderedType) \
ocaml(NCoq_Reals_R_Ifp) \
ocaml(NCoq_Reals_R_sqr) \
ocaml(NCoq_Reals_R_sqrt) \
ocaml(NCoq_Reals_Ranalysis) \
ocaml(NCoq_Reals_Ranalysis1) \
ocaml(NCoq_Reals_Ranalysis2) \
ocaml(NCoq_Reals_Ranalysis3) \
ocaml(NCoq_Reals_Ranalysis4) \
ocaml(NCoq_Reals_Ranalysis5) \
ocaml(NCoq_Reals_Ranalysis_reg) \
ocaml(NCoq_Reals_Ratan) \
ocaml(NCoq_Reals_Raxioms) \
ocaml(NCoq_Reals_Rbase) \
ocaml(NCoq_Reals_Rbasic_fun) \
ocaml(NCoq_Reals_Rcomplete) \
ocaml(NCoq_Reals_Rdefinitions) \
ocaml(NCoq_Reals_Rderiv) \
ocaml(NCoq_Reals_Reals) \
ocaml(NCoq_Reals_Rfunctions) \
ocaml(NCoq_Reals_Rgeom) \
ocaml(NCoq_Reals_RiemannInt) \
ocaml(NCoq_Reals_RiemannInt_SF) \
ocaml(NCoq_Reals_Rlimit) \
ocaml(NCoq_Reals_Rlogic) \
ocaml(NCoq_Reals_Rminmax) \
ocaml(NCoq_Reals_Rpow_def) \
ocaml(NCoq_Reals_Rpower) \
ocaml(NCoq_Reals_Rprod) \
ocaml(NCoq_Reals_Rregisternames) \
ocaml(NCoq_Reals_Rseries) \
ocaml(NCoq_Reals_Rsigma) \
ocaml(NCoq_Reals_Rsqrt_def) \
ocaml(NCoq_Reals_Rtopology) \
ocaml(NCoq_Reals_Rtrigo) \
ocaml(NCoq_Reals_Rtrigo1) \
ocaml(NCoq_Reals_Rtrigo_alt) \
ocaml(NCoq_Reals_Rtrigo_calc) \
ocaml(NCoq_Reals_Rtrigo_def) \
ocaml(NCoq_Reals_Rtrigo_facts) \
ocaml(NCoq_Reals_Rtrigo_fun) \
ocaml(NCoq_Reals_Rtrigo_reg) \
ocaml(NCoq_Reals_Runcountable) \
ocaml(NCoq_Reals_SeqProp) \
ocaml(NCoq_Reals_SeqSeries) \
ocaml(NCoq_Reals_SplitAbsolu) \
ocaml(NCoq_Reals_SplitRmult) \
ocaml(NCoq_Reals_Sqrt_reg) \
ocaml(NCoq_Relations_Operators_Properties) \
ocaml(NCoq_Relations_Relation_Definitions) \
ocaml(NCoq_Relations_Relation_Operators) \
ocaml(NCoq_Relations_Relations) \
ocaml(NCoq_Setoids_Setoid) \
ocaml(NCoq_Sets_Classical_sets) \
ocaml(NCoq_Sets_Constructive_sets) \
ocaml(NCoq_Sets_Cpo) \
ocaml(NCoq_Sets_Ensembles) \
ocaml(NCoq_Sets_Finite_sets) \
ocaml(NCoq_Sets_Finite_sets_facts) \
ocaml(NCoq_Sets_Image) \
ocaml(NCoq_Sets_Infinite_sets) \
ocaml(NCoq_Sets_Integers) \
ocaml(NCoq_Sets_Multiset) \
ocaml(NCoq_Sets_Partial_Order) \
ocaml(NCoq_Sets_Permut) \
ocaml(NCoq_Sets_Powerset) \
ocaml(NCoq_Sets_Powerset_Classical_facts) \
ocaml(NCoq_Sets_Powerset_facts) \
ocaml(NCoq_Sets_Relations_1) \
ocaml(NCoq_Sets_Relations_1_facts) \
ocaml(NCoq_Sets_Relations_2) \
ocaml(NCoq_Sets_Relations_2_facts) \
ocaml(NCoq_Sets_Relations_3) \
ocaml(NCoq_Sets_Relations_3_facts) \
ocaml(NCoq_Sets_Uniset) \
ocaml(NCoq_Sorting_CPermutation) \
ocaml(NCoq_Sorting_Heap) \
ocaml(NCoq_Sorting_Mergesort) \
ocaml(NCoq_Sorting_PermutEq) \
ocaml(NCoq_Sorting_PermutSetoid) \
ocaml(NCoq_Sorting_Permutation) \
ocaml(NCoq_Sorting_Sorted) \
ocaml(NCoq_Sorting_Sorting) \
ocaml(NCoq_Strings_Ascii) \
ocaml(NCoq_Strings_BinaryString) \
ocaml(NCoq_Strings_Byte) \
ocaml(NCoq_Strings_ByteVector) \
ocaml(NCoq_Strings_HexString) \
ocaml(NCoq_Strings_OctalString) \
ocaml(NCoq_Strings_String) \
ocaml(NCoq_Structures_DecidableType) \
ocaml(NCoq_Structures_DecidableTypeEx) \
ocaml(NCoq_Structures_Equalities) \
ocaml(NCoq_Structures_EqualitiesFacts) \
ocaml(NCoq_Structures_GenericMinMax) \
ocaml(NCoq_Structures_OrderedType) \
ocaml(NCoq_Structures_OrderedTypeAlt) \
ocaml(NCoq_Structures_OrderedTypeEx) \
ocaml(NCoq_Structures_Orders) \
ocaml(NCoq_Structures_OrdersAlt) \
ocaml(NCoq_Structures_OrdersEx) \
ocaml(NCoq_Structures_OrdersFacts) \
ocaml(NCoq_Structures_OrdersLists) \
ocaml(NCoq_Structures_OrdersTac) \
ocaml(NCoq_Unicode_Utf8) \
ocaml(NCoq_Unicode_Utf8_core) \
ocaml(NCoq_Vectors_Fin) \
ocaml(NCoq_Vectors_Vector) \
ocaml(NCoq_Vectors_VectorDef) \
ocaml(NCoq_Vectors_VectorEq) \
ocaml(NCoq_Vectors_VectorSpec) \
ocaml(NCoq_Wellfounded_Disjoint_Union) \
ocaml(NCoq_Wellfounded_Inclusion) \
ocaml(NCoq_Wellfounded_Inverse_Image) \
ocaml(NCoq_Wellfounded_Lexicographic_Exponentiation) \
ocaml(NCoq_Wellfounded_Lexicographic_Product) \
ocaml(NCoq_Wellfounded_Transitive_Closure) \
ocaml(NCoq_Wellfounded_Union) \
ocaml(NCoq_Wellfounded_Well_Ordering) \
ocaml(NCoq_Wellfounded_Wellfounded) \
ocaml(NCoq_ZArith_BinInt) \
ocaml(NCoq_ZArith_BinIntDef) \
ocaml(NCoq_ZArith_Int) \
ocaml(NCoq_ZArith_Wf_Z) \
ocaml(NCoq_ZArith_ZArith) \
ocaml(NCoq_ZArith_ZArith_base) \
ocaml(NCoq_ZArith_ZArith_dec) \
ocaml(NCoq_ZArith_Zabs) \
ocaml(NCoq_ZArith_Zbool) \
ocaml(NCoq_ZArith_Zcompare) \
ocaml(NCoq_ZArith_Zcomplements) \
ocaml(NCoq_ZArith_Zdigits) \
ocaml(NCoq_ZArith_Zdiv) \
ocaml(NCoq_ZArith_Zeuclid) \
ocaml(NCoq_ZArith_Zeven) \
ocaml(NCoq_ZArith_Zgcd_alt) \
ocaml(NCoq_ZArith_Zhints) \
ocaml(NCoq_ZArith_Zmax) \
ocaml(NCoq_ZArith_Zmin) \
ocaml(NCoq_ZArith_Zminmax) \
ocaml(NCoq_ZArith_Zmisc) \
ocaml(NCoq_ZArith_Znat) \
ocaml(NCoq_ZArith_Znumtheory) \
ocaml(NCoq_ZArith_Zorder) \
ocaml(NCoq_ZArith_Zpow_alt) \
ocaml(NCoq_ZArith_Zpow_def) \
ocaml(NCoq_ZArith_Zpow_facts) \
ocaml(NCoq_ZArith_Zpower) \
ocaml(NCoq_ZArith_Zquot) \
ocaml(NCoq_ZArith_Zwf) \
ocaml(NCoq_ZArith_auxiliary) \
ocaml(NCoq_btauto_Algebra) \
ocaml(NCoq_btauto_Btauto) \
ocaml(NCoq_btauto_Reflect) \
ocaml(NCoq_derive_Derive) \
ocaml(NCoq_extraction_ExtrHaskellBasic) \
ocaml(NCoq_extraction_ExtrHaskellNatInt) \
ocaml(NCoq_extraction_ExtrHaskellNatInteger) \
ocaml(NCoq_extraction_ExtrHaskellNatNum) \
ocaml(NCoq_extraction_ExtrHaskellString) \
ocaml(NCoq_extraction_ExtrHaskellZInt) \
ocaml(NCoq_extraction_ExtrHaskellZInteger) \
ocaml(NCoq_extraction_ExtrHaskellZNum) \
ocaml(NCoq_extraction_ExtrOCamlFloats) \
ocaml(NCoq_extraction_ExtrOCamlInt63) \
ocaml(NCoq_extraction_ExtrOCamlPArray) \
ocaml(NCoq_extraction_ExtrOcamlBasic) \
ocaml(NCoq_extraction_ExtrOcamlChar) \
ocaml(NCoq_extraction_ExtrOcamlIntConv) \
ocaml(NCoq_extraction_ExtrOcamlNatBigInt) \
ocaml(NCoq_extraction_ExtrOcamlNatInt) \
ocaml(NCoq_extraction_ExtrOcamlNativeString) \
ocaml(NCoq_extraction_ExtrOcamlString) \
ocaml(NCoq_extraction_ExtrOcamlZBigInt) \
ocaml(NCoq_extraction_ExtrOcamlZInt) \
ocaml(NCoq_extraction_Extraction) \
ocaml(NCoq_funind_FunInd) \
ocaml(NCoq_funind_Recdef) \
ocaml(NCoq_micromega_DeclConstant) \
ocaml(NCoq_micromega_Env) \
ocaml(NCoq_micromega_EnvRing) \
ocaml(NCoq_micromega_Fourier) \
ocaml(NCoq_micromega_Fourier_util) \
ocaml(NCoq_micromega_Lia) \
ocaml(NCoq_micromega_Lqa) \
ocaml(NCoq_micromega_Lra) \
ocaml(NCoq_micromega_MExtraction) \
ocaml(NCoq_micromega_OrderedRing) \
ocaml(NCoq_micromega_Psatz) \
ocaml(NCoq_micromega_QMicromega) \
ocaml(NCoq_micromega_RMicromega) \
ocaml(NCoq_micromega_Refl) \
ocaml(NCoq_micromega_RingMicromega) \
ocaml(NCoq_micromega_Tauto) \
ocaml(NCoq_micromega_VarMap) \
ocaml(NCoq_micromega_ZArith_hints) \
ocaml(NCoq_micromega_ZCoeff) \
ocaml(NCoq_micromega_ZMicromega) \
ocaml(NCoq_micromega_Zify) \
ocaml(NCoq_micromega_ZifyBool) \
ocaml(NCoq_micromega_ZifyClasses) \
ocaml(NCoq_micromega_ZifyComparison) \
ocaml(NCoq_micromega_ZifyInst) \
ocaml(NCoq_micromega_ZifyN) \
ocaml(NCoq_micromega_ZifyNat) \
ocaml(NCoq_micromega_ZifyPow) \
ocaml(NCoq_micromega_ZifySint63) \
ocaml(NCoq_micromega_ZifyUint63) \
ocaml(NCoq_micromega_Ztac) \
ocaml(NCoq_nsatz_Nsatz) \
ocaml(NCoq_nsatz_NsatzTactic) \
ocaml(NCoq_omega_OmegaLemmas) \
ocaml(NCoq_omega_PreOmega) \
ocaml(NCoq_rtauto_Bintree) \
ocaml(NCoq_rtauto_Rtauto) \
ocaml(NCoq_setoid_ring_Algebra_syntax) \
ocaml(NCoq_setoid_ring_ArithRing) \
ocaml(NCoq_setoid_ring_BinList) \
ocaml(NCoq_setoid_ring_Cring) \
ocaml(NCoq_setoid_ring_Field) \
ocaml(NCoq_setoid_ring_Field_tac) \
ocaml(NCoq_setoid_ring_Field_theory) \
ocaml(NCoq_setoid_ring_InitialRing) \
ocaml(NCoq_setoid_ring_Integral_domain) \
ocaml(NCoq_setoid_ring_NArithRing) \
ocaml(NCoq_setoid_ring_Ncring) \
ocaml(NCoq_setoid_ring_Ncring_initial) \
ocaml(NCoq_setoid_ring_Ncring_polynom) \
ocaml(NCoq_setoid_ring_Ncring_tac) \
ocaml(NCoq_setoid_ring_RealField) \
ocaml(NCoq_setoid_ring_Ring) \
ocaml(NCoq_setoid_ring_Ring_base) \
ocaml(NCoq_setoid_ring_Ring_polynom) \
ocaml(NCoq_setoid_ring_Ring_tac) \
ocaml(NCoq_setoid_ring_Ring_theory) \
ocaml(NCoq_setoid_ring_Rings_Q) \
ocaml(NCoq_setoid_ring_Rings_R) \
ocaml(NCoq_setoid_ring_Rings_Z) \
ocaml(NCoq_setoid_ring_ZArithRing) \
ocaml(NCoq_ssr_ssrbool) \
ocaml(NCoq_ssr_ssrclasses) \
ocaml(NCoq_ssr_ssreflect) \
ocaml(NCoq_ssr_ssrfun) \
ocaml(NCoq_ssr_ssrsetoid) \
ocaml(NCoq_ssr_ssrunder) \
ocaml(NCoq_ssrmatching_ssrmatching) \
ocaml(NLtac2_Array) \
ocaml(NLtac2_Bool) \
ocaml(NLtac2_Char) \
ocaml(NLtac2_Constant) \
ocaml(NLtac2_Constr) \
ocaml(NLtac2_Constructor) \
ocaml(NLtac2_Control) \
ocaml(NLtac2_Env) \
ocaml(NLtac2_Evar) \
ocaml(NLtac2_Float) \
ocaml(NLtac2_Fresh) \
ocaml(NLtac2_Ident) \
ocaml(NLtac2_Ind) \
ocaml(NLtac2_Init) \
ocaml(NLtac2_Int) \
ocaml(NLtac2_List) \
ocaml(NLtac2_Ltac1) \
ocaml(NLtac2_Ltac2) \
ocaml(NLtac2_Message) \
ocaml(NLtac2_Meta) \
ocaml(NLtac2_Notations) \
ocaml(NLtac2_Option) \
ocaml(NLtac2_Pattern) \
ocaml(NLtac2_Printf) \
ocaml(NLtac2_Proj) \
ocaml(NLtac2_Std) \
ocaml(NLtac2_String) \
ocaml(NLtac2_Uint63) \
ocaml(Namegen) \
ocaml(Nameops) \
ocaml(Names) \
ocaml(Nametab) \
ocaml(Nativecode) \
ocaml(Nativeconv) \
ocaml(Nativelambda) \
ocaml(Nativelib) \
ocaml(Nativelibrary) \
ocaml(Nativenorm) \
ocaml(Nativevalues) \
ocaml(NeList) \
ocaml(Notation) \
ocaml(Notation_gram) \
ocaml(Notation_ops) \
ocaml(Notation_term) \
ocaml(Notationextern) \
ocaml(Notgram_ops) \
ocaml(Nsatz_plugin) \
ocaml(Nsatz_plugin__G_nsatz) \
ocaml(Nsatz_plugin__Ideal) \
ocaml(Nsatz_plugin__Nsatz) \
ocaml(Nsatz_plugin__Polynom) \
ocaml(Nsatz_plugin__Utile) \
ocaml(NumTok) \
ocaml(Number_string_notation_plugin) \
ocaml(Number_string_notation_plugin__G_number_string) \
ocaml(Number_string_notation_plugin__Number) \
ocaml(Number_string_notation_plugin__String_notation) \
ocaml(ObjFile) \
ocaml(Opaqueproof) \
ocaml(Opaques) \
ocaml(Option) \
ocaml(OrderedType) \
ocaml(Parray) \
ocaml(Partac) \
ocaml(Pattern) \
ocaml(Patternops) \
ocaml(Pcoq) \
ocaml(Pp) \
ocaml(Pp_diff) \
ocaml(Ppconstr) \
ocaml(Ppextend) \
ocaml(Ppred) \
ocaml(Pputils) \
ocaml(Ppvernac) \
ocaml(Predicate) \
ocaml(Prettyp) \
ocaml(Pretype_errors) \
ocaml(Pretyping) \
ocaml(Primred) \
ocaml(Printer) \
ocaml(Printmod) \
ocaml(Program) \
ocaml(Proof) \
ocaml(ProofBlockDelimiter) \
ocaml(Proof_bullet) \
ocaml(Proof_diffs) \
ocaml(Proof_using) \
ocaml(Proofview) \
ocaml(Proofview_monad) \
ocaml(Pvernac) \
ocaml(Range) \
ocaml(RecLemmas) \
ocaml(Record) \
ocaml(Redexpr) \
ocaml(Redops) \
ocaml(Reduction) \
ocaml(Reductionops) \
ocaml(Refine) \
ocaml(Relevanceops) \
ocaml(Reserve) \
ocaml(RetrieveObl) \
ocaml(Retroknowledge) \
ocaml(Retyping) \
ocaml(Rewrite) \
ocaml(Richpp) \
ocaml(Ring_plugin) \
ocaml(Ring_plugin__G_ring) \
ocaml(Ring_plugin__Ring) \
ocaml(Ring_plugin__Ring_ast) \
ocaml(Rtauto_plugin) \
ocaml(Rtauto_plugin__G_rtauto) \
ocaml(Rtauto_plugin__Proof_search) \
ocaml(Rtauto_plugin__Refl_tauto) \
ocaml(Rtree) \
ocaml(SList) \
ocaml(Safe_typing) \
ocaml(Search) \
ocaml(Section) \
ocaml(Segmenttree) \
ocaml(Serialize) \
ocaml(Smartlocate) \
ocaml(Sorts) \
ocaml(Spawn) \
ocaml(Spawned) \
ocaml(Ssreflect_plugin) \
ocaml(Ssreflect_plugin__Ssrast) \
ocaml(Ssreflect_plugin__Ssrbwd) \
ocaml(Ssreflect_plugin__Ssrcommon) \
ocaml(Ssreflect_plugin__Ssrelim) \
ocaml(Ssreflect_plugin__Ssrequality) \
ocaml(Ssreflect_plugin__Ssrfwd) \
ocaml(Ssreflect_plugin__Ssripats) \
ocaml(Ssreflect_plugin__Ssrparser) \
ocaml(Ssreflect_plugin__Ssrprinters) \
ocaml(Ssreflect_plugin__Ssrtacticals) \
ocaml(Ssreflect_plugin__Ssrvernac) \
ocaml(Ssreflect_plugin__Ssrview) \
ocaml(Ssrmatching_plugin) \
ocaml(Ssrmatching_plugin__G_ssrmatching) \
ocaml(Ssrmatching_plugin__Ssrmatching) \
ocaml(Stateid) \
ocaml(Stdarg) \
ocaml(Stm) \
ocaml(Stmargs) \
ocaml(Store) \
ocaml(Structures) \
ocaml(Subtyping) \
ocaml(Summary) \
ocaml(System) \
ocaml(TQueue) \
ocaml(Tacmach) \
ocaml(Tacred) \
ocaml(Tacticals) \
ocaml(Tactics) \
ocaml(Tactypes) \
ocaml(Tauto_plugin) \
ocaml(Tauto_plugin__Tauto) \
ocaml(Term) \
ocaml(Term_typing) \
ocaml(Terminal) \
ocaml(Termops) \
ocaml(Tok) \
ocaml(Top_printers) \
ocaml(Topfmt) \
ocaml(TransparentState) \
ocaml(Trie) \
ocaml(Tuto0_plugin) \
ocaml(Tuto0_plugin__G_tuto0) \
ocaml(Tuto0_plugin__Tuto0_main) \
ocaml(Tuto1_plugin) \
ocaml(Tuto1_plugin__G_tuto1) \
ocaml(Tuto1_plugin__Inspector) \
ocaml(Tuto1_plugin__Simple_check) \
ocaml(Tuto1_plugin__Simple_declare) \
ocaml(Tuto1_plugin__Simple_print) \
ocaml(Tuto2_plugin) \
ocaml(Tuto2_plugin__Counter) \
ocaml(Tuto2_plugin__Custom) \
ocaml(Tuto2_plugin__G_tuto2) \
ocaml(Tuto2_plugin__Persistent_counter) \
ocaml(Tuto3_plugin) \
ocaml(Tuto3_plugin__Construction_game) \
ocaml(Tuto3_plugin__G_tuto3) \
ocaml(Tuto3_plugin__Tuto_tactic) \
ocaml(Type_errors) \
ocaml(Typeclasses) \
ocaml(Typeclasses_errors) \
ocaml(Typeops) \
ocaml(Typing) \
ocaml(UGraph) \
ocaml(UState) \
ocaml(Uint63) \
ocaml(Unicode) \
ocaml(Unicodetable) \
ocaml(Unification) \
ocaml(Unionfind) \
ocaml(Univ) \
ocaml(UnivGen) \
ocaml(UnivMinim) \
ocaml(UnivNames) \
ocaml(UnivProblem) \
ocaml(UnivSubst) \
ocaml(Util) \
ocaml(Values) \
ocaml(Vars) \
ocaml(Vconv) \
ocaml(Vcs) \
ocaml(Vernac) \
ocaml(Vernac_classifier) \
ocaml(Vernacentries) \
ocaml(Vernacexpr) \
ocaml(Vernacextend) \
ocaml(Vernacinterp) \
ocaml(Vernacprop) \
ocaml(Vernacstate) \
ocaml(Vio_checking) \
ocaml(Vio_compile) \
ocaml(Vm) \
ocaml(Vmbytecodes) \
ocaml(Vmbytegen) \
ocaml(Vmemitcodes) \
ocaml(Vmlambda) \
ocaml(Vmopcodes) \
ocaml(Vmsymtable) \
ocaml(Vmvalues) \
ocaml(Vnorm) \
ocaml(WorkerLoop) \
ocaml(WorkerPool) \
ocaml(Xml_datatype) \
ocaml(Xml_lexer) \
ocaml(Xml_parser) \
ocaml(Xml_printer) \
ocaml(Xmlprotocol) \
ocaml(Zify_plugin) \
ocaml(Zify_plugin__G_zify) \
ocaml(Zify_plugin__Zify) \
ocamlx(Abbreviation) \
ocamlx(Abstract) \
ocamlx(AcyclicGraph) \
ocamlx(Arguments_renaming) \
ocamlx(Assumptions) \
ocamlx(AsyncTaskQueue) \
ocamlx(Attributes) \
ocamlx(Auto) \
ocamlx(Auto_ind_decl) \
ocamlx(Autorewrite) \
ocamlx(Aux_file) \
ocamlx(Boot) \
ocamlx(Boot__Env) \
ocamlx(Boot__Path) \
ocamlx(Boot__Usage) \
ocamlx(Boot__Util) \
ocamlx(Btauto_plugin) \
ocamlx(Btauto_plugin__G_btauto) \
ocamlx(Btauto_plugin__Refl_btauto) \
ocamlx(Btermdn) \
ocamlx(CArray) \
ocamlx(CAst) \
ocamlx(CClosure) \
ocamlx(CDebug) \
ocamlx(CEphemeron) \
ocamlx(CErrors) \
ocamlx(CLexer) \
ocamlx(CList) \
ocamlx(CMap) \
ocamlx(CObj) \
ocamlx(CPrimitives) \
ocamlx(CProfile) \
ocamlx(CSet) \
ocamlx(CString) \
ocamlx(CThread) \
ocamlx(CUnix) \
ocamlx(CWarnings) \
ocamlx(Canonical) \
ocamlx(Cases) \
ocamlx(Cbn) \
ocamlx(Cbv) \
ocamlx(Cc_plugin) \
ocamlx(Cc_plugin__Ccalgo) \
ocamlx(Cc_plugin__Ccproof) \
ocamlx(Cc_plugin__Cctac) \
ocamlx(Cc_plugin__G_congruence) \
ocamlx(Ccompile) \
ocamlx(Class_tactics) \
ocamlx(Classes) \
ocamlx(Clenv) \
ocamlx(Coercion) \
ocamlx(Coercionops) \
ocamlx(Colors) \
ocamlx(ComArguments) \
ocamlx(ComAssumption) \
ocamlx(ComCoercion) \
ocamlx(ComDefinition) \
ocamlx(ComExtraDeps) \
ocamlx(ComFixpoint) \
ocamlx(ComHints) \
ocamlx(ComInductive) \
ocamlx(ComPrimitive) \
ocamlx(ComProgramFixpoint) \
ocamlx(ComSearch) \
ocamlx(ComTactic) \
ocamlx(Common_compile) \
ocamlx(Constr) \
ocamlx(Constr_matching) \
ocamlx(Constrexpr) \
ocamlx(Constrexpr_ops) \
ocamlx(Constrextern) \
ocamlx(Constrintern) \
ocamlx(Context) \
ocamlx(Contradiction) \
ocamlx(Control) \
ocamlx(Conv_oracle) \
ocamlx(Cooking) \
ocamlx(CoqProject_file) \
ocamlx(Coq_config) \
ocamlx(Coqargs) \
ocamlx(Coqc) \
ocamlx(Coqcargs) \
ocamlx(Coqinit) \
ocamlx(Coqlib) \
ocamlx(Coqloadpath) \
ocamlx(Coqloop) \
ocamlx(Coqrc) \
ocamlx(Coqrun) \
ocamlx(Coqtop) \
ocamlx(CoqworkmgrApi) \
ocamlx(Core_plugins_findlib_compat) \
ocamlx(DAst) \
ocamlx(Dag) \
ocamlx(DebugHook) \
ocamlx(Declarations) \
ocamlx(Declare) \
ocamlx(DeclareInd) \
ocamlx(DeclareScheme) \
ocamlx(DeclareUctx) \
ocamlx(DeclareUniv) \
ocamlx(Declaremods) \
ocamlx(Declareops) \
ocamlx(Decls) \
ocamlx(Deprecation) \
ocamlx(Derive_plugin) \
ocamlx(Derive_plugin__Derive) \
ocamlx(Derive_plugin__G_derive) \
ocamlx(Detyping) \
ocamlx(Diff2) \
ocamlx(Discharge) \
ocamlx(Dn) \
ocamlx(Document) \
ocamlx(Dumpglob) \
ocamlx(Dyn) \
ocamlx(EConstr) \
ocamlx(Eauto) \
ocamlx(Egramcoq) \
ocamlx(Egramml) \
ocamlx(Elim) \
ocamlx(Elimschemes) \
ocamlx(Entries) \
ocamlx(Envars) \
ocamlx(Environ) \
ocamlx(Eqdecide) \
ocamlx(Eqschemes) \
ocamlx(Equality) \
ocamlx(Esubst) \
ocamlx(Evar) \
ocamlx(Evar_kinds) \
ocamlx(Evar_tactics) \
ocamlx(Evarconv) \
ocamlx(Evardefine) \
ocamlx(Evarsolve) \
ocamlx(Evarutil) \
ocamlx(Evd) \
ocamlx(Exninfo) \
ocamlx(Extend) \
ocamlx(Extraction_plugin) \
ocamlx(Extraction_plugin__Common) \
ocamlx(Extraction_plugin__Extract_env) \
ocamlx(Extraction_plugin__Extraction) \
ocamlx(Extraction_plugin__G_extraction) \
ocamlx(Extraction_plugin__Haskell) \
ocamlx(Extraction_plugin__Json) \
ocamlx(Extraction_plugin__Miniml) \
ocamlx(Extraction_plugin__Mlutil) \
ocamlx(Extraction_plugin__Modutil) \
ocamlx(Extraction_plugin__Ocaml) \
ocamlx(Extraction_plugin__Scheme) \
ocamlx(Extraction_plugin__Table) \
ocamlx(Feedback) \
ocamlx(Find_subterm) \
ocamlx(Firstorder_plugin) \
ocamlx(Firstorder_plugin__Formula) \
ocamlx(Firstorder_plugin__G_ground) \
ocamlx(Firstorder_plugin__Ground) \
ocamlx(Firstorder_plugin__Instances) \
ocamlx(Firstorder_plugin__Rules) \
ocamlx(Firstorder_plugin__Sequent) \
ocamlx(Firstorder_plugin__Unify) \
ocamlx(Flags) \
ocamlx(Float64) \
ocamlx(Float64_common) \
ocamlx(Ftactic) \
ocamlx(Funind_plugin) \
ocamlx(Funind_plugin__Functional_principles_proofs) \
ocamlx(Funind_plugin__Functional_principles_types) \
ocamlx(Funind_plugin__G_indfun) \
ocamlx(Funind_plugin__Gen_principle) \
ocamlx(Funind_plugin__Glob_term_to_relation) \
ocamlx(Funind_plugin__Glob_termops) \
ocamlx(Funind_plugin__Indfun) \
ocamlx(Funind_plugin__Indfun_common) \
ocamlx(Funind_plugin__Invfun) \
ocamlx(Funind_plugin__Recdef) \
ocamlx(Future) \
ocamlx(G_constr) \
ocamlx(G_prim) \
ocamlx(G_proofs) \
ocamlx(G_toplevel) \
ocamlx(G_vernac) \
ocamlx(Genarg) \
ocamlx(Genintern) \
ocamlx(Geninterp) \
ocamlx(Genlambda) \
ocamlx(Genprint) \
ocamlx(Genredexpr) \
ocamlx(GlobEnv) \
ocamlx(Glob_ops) \
ocamlx(Glob_term) \
ocamlx(Global) \
ocamlx(Globnames) \
ocamlx(Goal_select) \
ocamlx(Goptions) \
ocamlx(Gramlib) \
ocamlx(Gramlib__Gramext) \
ocamlx(Gramlib__Grammar) \
ocamlx(Gramlib__LStream) \
ocamlx(Gramlib__Plexing) \
ocamlx(Gramlib__Stream) \
ocamlx(HMap) \
ocamlx(Hashcons) \
ocamlx(Hashset) \
ocamlx(Heads) \
ocamlx(Heap) \
ocamlx(Himsg) \
ocamlx(Hints) \
ocamlx(Hipattern) \
ocamlx(Hook) \
ocamlx(IStream) \
ocamlx(Impargs) \
ocamlx(Implicit_quantifiers) \
ocamlx(IndTyping) \
ocamlx(Ind_tables) \
ocamlx(Indrec) \
ocamlx(Indschemes) \
ocamlx(Indtypes) \
ocamlx(Inductive) \
ocamlx(Inductiveops) \
ocamlx(InferCumulativity) \
ocamlx(Int) \
ocamlx(Interface) \
ocamlx(Inv) \
ocamlx(Keys) \
ocamlx(Lib) \
ocamlx(Libnames) \
ocamlx(Libobject) \
ocamlx(Library) \
ocamlx(Load) \
ocamlx(Loadpath) \
ocamlx(Loc) \
ocamlx(Locality) \
ocamlx(Locus) \
ocamlx(Locusops) \
ocamlx(Logic) \
ocamlx(Logic_monad) \
ocamlx(Ltac2_plugin) \
ocamlx(Ltac2_plugin__G_ltac2) \
ocamlx(Ltac2_plugin__Tac2core) \
ocamlx(Ltac2_plugin__Tac2dyn) \
ocamlx(Ltac2_plugin__Tac2entries) \
ocamlx(Ltac2_plugin__Tac2env) \
ocamlx(Ltac2_plugin__Tac2extffi) \
ocamlx(Ltac2_plugin__Tac2ffi) \
ocamlx(Ltac2_plugin__Tac2intern) \
ocamlx(Ltac2_plugin__Tac2interp) \
ocamlx(Ltac2_plugin__Tac2match) \
ocamlx(Ltac2_plugin__Tac2print) \
ocamlx(Ltac2_plugin__Tac2quote) \
ocamlx(Ltac2_plugin__Tac2stdlib) \
ocamlx(Ltac2_plugin__Tac2tactics) \
ocamlx(Ltac2_plugin__Tac2typing_env) \
ocamlx(Ltac_plugin) \
ocamlx(Ltac_plugin__ComRewrite) \
ocamlx(Ltac_plugin__Coretactics) \
ocamlx(Ltac_plugin__Extraargs) \
ocamlx(Ltac_plugin__Extratactics) \
ocamlx(Ltac_plugin__G_auto) \
ocamlx(Ltac_plugin__G_class) \
ocamlx(Ltac_plugin__G_eqdecide) \
ocamlx(Ltac_plugin__G_ltac) \
ocamlx(Ltac_plugin__G_obligations) \
ocamlx(Ltac_plugin__G_rewrite) \
ocamlx(Ltac_plugin__G_tactic) \
ocamlx(Ltac_plugin__Internals) \
ocamlx(Ltac_plugin__Leminv) \
ocamlx(Ltac_plugin__Pltac) \
ocamlx(Ltac_plugin__Pptactic) \
ocamlx(Ltac_plugin__Profile_ltac) \
ocamlx(Ltac_plugin__Profile_ltac_tactics) \
ocamlx(Ltac_plugin__Tacarg) \
ocamlx(Ltac_plugin__Taccoerce) \
ocamlx(Ltac_plugin__Tacentries) \
ocamlx(Ltac_plugin__Tacenv) \
ocamlx(Ltac_plugin__Tacexpr) \
ocamlx(Ltac_plugin__Tacintern) \
ocamlx(Ltac_plugin__Tacinterp) \
ocamlx(Ltac_plugin__Tacsubst) \
ocamlx(Ltac_plugin__Tactic_debug) \
ocamlx(Ltac_plugin__Tactic_matching) \
ocamlx(Ltac_plugin__Tactic_option) \
ocamlx(Ltac_pretype) \
ocamlx(Metasyntax) \
ocamlx(Micromega_plugin) \
ocamlx(Micromega_plugin__Certificate) \
ocamlx(Micromega_plugin__Coq_micromega) \
ocamlx(Micromega_plugin__G_micromega) \
ocamlx(Micromega_plugin__Itv) \
ocamlx(Micromega_plugin__Linsolve) \
ocamlx(Micromega_plugin__Micromega) \
ocamlx(Micromega_plugin__Mutils) \
ocamlx(Micromega_plugin__NumCompat) \
ocamlx(Micromega_plugin__Persistent_cache) \
ocamlx(Micromega_plugin__Polynomial) \
ocamlx(Micromega_plugin__Simplex) \
ocamlx(Micromega_plugin__Sos) \
ocamlx(Micromega_plugin__Sos_lib) \
ocamlx(Micromega_plugin__Sos_types) \
ocamlx(Micromega_plugin__Vect) \
ocamlx(Miscprint) \
ocamlx(Mltop) \
ocamlx(Mod_subst) \
ocamlx(Mod_typing) \
ocamlx(Modintern) \
ocamlx(Modops) \
ocamlx(Monad) \
ocamlx(Namegen) \
ocamlx(Nameops) \
ocamlx(Names) \
ocamlx(Nametab) \
ocamlx(Nativecode) \
ocamlx(Nativeconv) \
ocamlx(Nativelambda) \
ocamlx(Nativelib) \
ocamlx(Nativelibrary) \
ocamlx(Nativenorm) \
ocamlx(Nativevalues) \
ocamlx(NeList) \
ocamlx(Notation) \
ocamlx(Notation_gram) \
ocamlx(Notation_ops) \
ocamlx(Notation_term) \
ocamlx(Notationextern) \
ocamlx(Notgram_ops) \
ocamlx(Nsatz_plugin) \
ocamlx(Nsatz_plugin__G_nsatz) \
ocamlx(Nsatz_plugin__Ideal) \
ocamlx(Nsatz_plugin__Nsatz) \
ocamlx(Nsatz_plugin__Polynom) \
ocamlx(Nsatz_plugin__Utile) \
ocamlx(NumTok) \
ocamlx(Number_string_notation_plugin) \
ocamlx(Number_string_notation_plugin__G_number_string) \
ocamlx(Number_string_notation_plugin__Number) \
ocamlx(Number_string_notation_plugin__String_notation) \
ocamlx(ObjFile) \
ocamlx(Opaqueproof) \
ocamlx(Opaques) \
ocamlx(Option) \
ocamlx(OrderedType) \
ocamlx(Parray) \
ocamlx(Partac) \
ocamlx(Pattern) \
ocamlx(Patternops) \
ocamlx(Pcoq) \
ocamlx(Pp) \
ocamlx(Pp_diff) \
ocamlx(Ppconstr) \
ocamlx(Ppextend) \
ocamlx(Ppred) \
ocamlx(Pputils) \
ocamlx(Ppvernac) \
ocamlx(Predicate) \
ocamlx(Prettyp) \
ocamlx(Pretype_errors) \
ocamlx(Pretyping) \
ocamlx(Primred) \
ocamlx(Printer) \
ocamlx(Printmod) \
ocamlx(Program) \
ocamlx(Proof) \
ocamlx(ProofBlockDelimiter) \
ocamlx(Proof_bullet) \
ocamlx(Proof_diffs) \
ocamlx(Proof_using) \
ocamlx(Proofview) \
ocamlx(Proofview_monad) \
ocamlx(Pvernac) \
ocamlx(Range) \
ocamlx(RecLemmas) \
ocamlx(Record) \
ocamlx(Redexpr) \
ocamlx(Redops) \
ocamlx(Reduction) \
ocamlx(Reductionops) \
ocamlx(Refine) \
ocamlx(Relevanceops) \
ocamlx(Reserve) \
ocamlx(RetrieveObl) \
ocamlx(Retroknowledge) \
ocamlx(Retyping) \
ocamlx(Rewrite) \
ocamlx(Richpp) \
ocamlx(Ring_plugin) \
ocamlx(Ring_plugin__G_ring) \
ocamlx(Ring_plugin__Ring) \
ocamlx(Ring_plugin__Ring_ast) \
ocamlx(Rtauto_plugin) \
ocamlx(Rtauto_plugin__G_rtauto) \
ocamlx(Rtauto_plugin__Proof_search) \
ocamlx(Rtauto_plugin__Refl_tauto) \
ocamlx(Rtree) \
ocamlx(SList) \
ocamlx(Safe_typing) \
ocamlx(Search) \
ocamlx(Section) \
ocamlx(Segmenttree) \
ocamlx(Serialize) \
ocamlx(Smartlocate) \
ocamlx(Sorts) \
ocamlx(Spawn) \
ocamlx(Spawned) \
ocamlx(Ssreflect_plugin) \
ocamlx(Ssreflect_plugin__Ssrbwd) \
ocamlx(Ssreflect_plugin__Ssrcommon) \
ocamlx(Ssreflect_plugin__Ssrelim) \
ocamlx(Ssreflect_plugin__Ssrequality) \
ocamlx(Ssreflect_plugin__Ssrfwd) \
ocamlx(Ssreflect_plugin__Ssripats) \
ocamlx(Ssreflect_plugin__Ssrparser) \
ocamlx(Ssreflect_plugin__Ssrprinters) \
ocamlx(Ssreflect_plugin__Ssrtacticals) \
ocamlx(Ssreflect_plugin__Ssrvernac) \
ocamlx(Ssreflect_plugin__Ssrview) \
ocamlx(Ssrmatching_plugin) \
ocamlx(Ssrmatching_plugin__G_ssrmatching) \
ocamlx(Ssrmatching_plugin__Ssrmatching) \
ocamlx(Stateid) \
ocamlx(Stdarg) \
ocamlx(Stm) \
ocamlx(Stmargs) \
ocamlx(Store) \
ocamlx(Structures) \
ocamlx(Subtyping) \
ocamlx(Summary) \
ocamlx(System) \
ocamlx(TQueue) \
ocamlx(Tacmach) \
ocamlx(Tacred) \
ocamlx(Tacticals) \
ocamlx(Tactics) \
ocamlx(Tactypes) \
ocamlx(Tauto_plugin) \
ocamlx(Tauto_plugin__Tauto) \
ocamlx(Term) \
ocamlx(Term_typing) \
ocamlx(Terminal) \
ocamlx(Termops) \
ocamlx(Tok) \
ocamlx(Top_printers) \
ocamlx(Topfmt) \
ocamlx(TransparentState) \
ocamlx(Trie) \
ocamlx(Tuto0_plugin) \
ocamlx(Tuto0_plugin__G_tuto0) \
ocamlx(Tuto0_plugin__Tuto0_main) \
ocamlx(Tuto1_plugin) \
ocamlx(Tuto1_plugin__G_tuto1) \
ocamlx(Tuto1_plugin__Inspector) \
ocamlx(Tuto1_plugin__Simple_check) \
ocamlx(Tuto1_plugin__Simple_declare) \
ocamlx(Tuto1_plugin__Simple_print) \
ocamlx(Tuto2_plugin) \
ocamlx(Tuto2_plugin__Counter) \
ocamlx(Tuto2_plugin__Custom) \
ocamlx(Tuto2_plugin__G_tuto2) \
ocamlx(Tuto2_plugin__Persistent_counter) \
ocamlx(Tuto3_plugin) \
ocamlx(Tuto3_plugin__Construction_game) \
ocamlx(Tuto3_plugin__G_tuto3) \
ocamlx(Tuto3_plugin__Tuto_tactic) \
ocamlx(Type_errors) \
ocamlx(Typeclasses) \
ocamlx(Typeclasses_errors) \
ocamlx(Typeops) \
ocamlx(Typing) \
ocamlx(UGraph) \
ocamlx(UState) \
ocamlx(Uint63) \
ocamlx(Unicode) \
ocamlx(Unicodetable) \
ocamlx(Unification) \
ocamlx(Unionfind) \
ocamlx(Univ) \
ocamlx(UnivGen) \
ocamlx(UnivMinim) \
ocamlx(UnivNames) \
ocamlx(UnivProblem) \
ocamlx(UnivSubst) \
ocamlx(Util) \
ocamlx(Vars) \
ocamlx(Vconv) \
ocamlx(Vcs) \
ocamlx(Vernac) \
ocamlx(Vernac_classifier) \
ocamlx(Vernacentries) \
ocamlx(Vernacexpr) \
ocamlx(Vernacextend) \
ocamlx(Vernacinterp) \
ocamlx(Vernacprop) \
ocamlx(Vernacstate) \
ocamlx(Vio_checking) \
ocamlx(Vio_compile) \
ocamlx(Vm) \
ocamlx(Vmbytecodes) \
ocamlx(Vmbytegen) \
ocamlx(Vmemitcodes) \
ocamlx(Vmlambda) \
ocamlx(Vmopcodes) \
ocamlx(Vmsymtable) \
ocamlx(Vmvalues) \
ocamlx(Vnorm) \
ocamlx(WorkerLoop) \
ocamlx(WorkerPool) \
ocamlx(Xml_lexer) \
ocamlx(Xml_parser) \
ocamlx(Xml_printer) \
ocamlx(Xmlprotocol) \
ocamlx(Zify_plugin) \
ocamlx(Zify_plugin__G_zify) \
ocamlx(Zify_plugin__Zify)"

RDEPENDS:${PN} += "coq \
ocaml \
ocaml(Big_int_Z) \
ocaml(CamlinternalFormatBasics) \
ocaml(CamlinternalLazy) \
ocaml(CamlinternalMod) \
ocaml(CamlinternalOO) \
ocaml(Condition) \
ocaml(Dynlink) \
ocaml(Findlib) \
ocaml(Fl_dynload) \
ocaml(Fl_metascanner) \
ocaml(Fl_metatoken) \
ocaml(Fl_package_base) \
ocaml(Mutex) \
ocaml(Q) \
ocaml(Stdlib) \
ocaml(Stdlib__Array) \
ocaml(Stdlib__Bigarray) \
ocaml(Stdlib__Buffer) \
ocaml(Stdlib__Bytes) \
ocaml(Stdlib__Char) \
ocaml(Stdlib__Complex) \
ocaml(Stdlib__Digest) \
ocaml(Stdlib__Either) \
ocaml(Stdlib__Ephemeron) \
ocaml(Stdlib__Filename) \
ocaml(Stdlib__Format) \
ocaml(Stdlib__Fun) \
ocaml(Stdlib__Gc) \
ocaml(Stdlib__Hashtbl) \
ocaml(Stdlib__Int32) \
ocaml(Stdlib__Int64) \
ocaml(Stdlib__Lazy) \
ocaml(Stdlib__Lexing) \
ocaml(Stdlib__List) \
ocaml(Stdlib__Map) \
ocaml(Stdlib__Marshal) \
ocaml(Stdlib__Nativeint) \
ocaml(Stdlib__Obj) \
ocaml(Stdlib__Printexc) \
ocaml(Stdlib__Printf) \
ocaml(Stdlib__Queue) \
ocaml(Stdlib__Random) \
ocaml(Stdlib__Scanf) \
ocaml(Stdlib__Seq) \
ocaml(Stdlib__Set) \
ocaml(Stdlib__Stack) \
ocaml(Stdlib__String) \
ocaml(Stdlib__Sys) \
ocaml(Stdlib__Uchar) \
ocaml(Stdlib__Weak) \
ocaml(Str) \
ocaml(Thread) \
ocaml(Unix) \
ocaml(Z) \
ocamlx(Big_int_Z) \
ocamlx(CamlinternalLazy) \
ocamlx(CamlinternalMod) \
ocamlx(CamlinternalOO) \
ocamlx(Condition) \
ocamlx(Dynlink) \
ocamlx(Mutex) \
ocamlx(Q) \
ocamlx(Stdlib) \
ocamlx(Stdlib__Array) \
ocamlx(Stdlib__Buffer) \
ocamlx(Stdlib__Bytes) \
ocamlx(Stdlib__Char) \
ocamlx(Stdlib__Digest) \
ocamlx(Stdlib__Ephemeron) \
ocamlx(Stdlib__Filename) \
ocamlx(Stdlib__Format) \
ocamlx(Stdlib__Fun) \
ocamlx(Stdlib__Gc) \
ocamlx(Stdlib__Hashtbl) \
ocamlx(Stdlib__Int32) \
ocamlx(Stdlib__Int64) \
ocamlx(Stdlib__Lazy) \
ocamlx(Stdlib__Lexing) \
ocamlx(Stdlib__List) \
ocamlx(Stdlib__Map) \
ocamlx(Stdlib__Marshal) \
ocamlx(Stdlib__Obj) \
ocamlx(Stdlib__Printexc) \
ocamlx(Stdlib__Printf) \
ocamlx(Stdlib__Queue) \
ocamlx(Stdlib__Random) \
ocamlx(Stdlib__Scanf) \
ocamlx(Stdlib__Set) \
ocamlx(Stdlib__Stack) \
ocamlx(Stdlib__String) \
ocamlx(Stdlib__Sys) \
ocamlx(Stdlib__Weak) \
ocamlx(Str) \
ocamlx(Thread) \
ocamlx(Unix) \
ocamlx(Z)"

inherit rpm
