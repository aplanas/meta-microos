SUMMARY = "Development files for Flocq"
DESCRIPTION = "This package contains development files for Flocq."
LICENSE = "LGPL-3.0-or-later"

PV = "4.1.1"

RPM_NAME = "flocq-devel-4.1.1-1.3.aarch64.rpm"
RPM_HASH = "da232ad405910af9c260971e5d1d718c4e6d9dd354ec999d6cfed69a3b90cd9e9d0c347e4b73eb1c80c0779069d26e2f56075450b9d8101d4af7b2bca7ae00d4"

RPROVIDES:${PN} += "flocq-devel \
flocq-devel(aarch-64) \
ocaml(NFlocq_Calc_Bracket) \
ocaml(NFlocq_Calc_Div) \
ocaml(NFlocq_Calc_Operations) \
ocaml(NFlocq_Calc_Plus) \
ocaml(NFlocq_Calc_Round) \
ocaml(NFlocq_Calc_Sqrt) \
ocaml(NFlocq_Core_Core) \
ocaml(NFlocq_Core_Defs) \
ocaml(NFlocq_Core_Digits) \
ocaml(NFlocq_Core_FIX) \
ocaml(NFlocq_Core_FLT) \
ocaml(NFlocq_Core_FLX) \
ocaml(NFlocq_Core_FTZ) \
ocaml(NFlocq_Core_Float_prop) \
ocaml(NFlocq_Core_Generic_fmt) \
ocaml(NFlocq_Core_Raux) \
ocaml(NFlocq_Core_Round_NE) \
ocaml(NFlocq_Core_Round_pred) \
ocaml(NFlocq_Core_Ulp) \
ocaml(NFlocq_Core_Zaux) \
ocaml(NFlocq_IEEE754_Binary) \
ocaml(NFlocq_IEEE754_BinarySingleNaN) \
ocaml(NFlocq_IEEE754_Bits) \
ocaml(NFlocq_IEEE754_Int63Compat) \
ocaml(NFlocq_IEEE754_Int63Copy) \
ocaml(NFlocq_IEEE754_PrimFloat) \
ocaml(NFlocq_Pff_Pff) \
ocaml(NFlocq_Pff_Pff2Flocq) \
ocaml(NFlocq_Pff_Pff2FlocqAux) \
ocaml(NFlocq_Prop_Div_sqrt_error) \
ocaml(NFlocq_Prop_Double_rounding) \
ocaml(NFlocq_Prop_Mult_error) \
ocaml(NFlocq_Prop_Plus_error) \
ocaml(NFlocq_Prop_Relative) \
ocaml(NFlocq_Prop_Round_odd) \
ocaml(NFlocq_Prop_Sterbenz) \
ocaml(NFlocq_Version) \
ocamlx(NFlocq_Calc_Bracket) \
ocamlx(NFlocq_Calc_Div) \
ocamlx(NFlocq_Calc_Operations) \
ocamlx(NFlocq_Calc_Plus) \
ocamlx(NFlocq_Calc_Round) \
ocamlx(NFlocq_Calc_Sqrt) \
ocamlx(NFlocq_Core_Core) \
ocamlx(NFlocq_Core_Defs) \
ocamlx(NFlocq_Core_Digits) \
ocamlx(NFlocq_Core_FIX) \
ocamlx(NFlocq_Core_FLT) \
ocamlx(NFlocq_Core_FLX) \
ocamlx(NFlocq_Core_FTZ) \
ocamlx(NFlocq_Core_Float_prop) \
ocamlx(NFlocq_Core_Generic_fmt) \
ocamlx(NFlocq_Core_Raux) \
ocamlx(NFlocq_Core_Round_NE) \
ocamlx(NFlocq_Core_Round_pred) \
ocamlx(NFlocq_Core_Ulp) \
ocamlx(NFlocq_Core_Zaux) \
ocamlx(NFlocq_IEEE754_Binary) \
ocamlx(NFlocq_IEEE754_BinarySingleNaN) \
ocamlx(NFlocq_IEEE754_Bits) \
ocamlx(NFlocq_IEEE754_Int63Compat) \
ocamlx(NFlocq_IEEE754_Int63Copy) \
ocamlx(NFlocq_IEEE754_PrimFloat) \
ocamlx(NFlocq_Pff_Pff) \
ocamlx(NFlocq_Pff_Pff2Flocq) \
ocamlx(NFlocq_Pff_Pff2FlocqAux) \
ocamlx(NFlocq_Prop_Div_sqrt_error) \
ocamlx(NFlocq_Prop_Double_rounding) \
ocamlx(NFlocq_Prop_Mult_error) \
ocamlx(NFlocq_Prop_Plus_error) \
ocamlx(NFlocq_Prop_Relative) \
ocamlx(NFlocq_Prop_Round_odd) \
ocamlx(NFlocq_Prop_Sterbenz) \
ocamlx(NFlocq_Version)"
RDEPENDS:${PN} += "coq-devel \
flocq \
ocaml(AcyclicGraph) \
ocaml(CArray) \
ocaml(CAst) \
ocaml(CDebug) \
ocaml(CEphemeron) \
ocaml(CList) \
ocaml(CMap) \
ocaml(CPrimitives) \
ocaml(CSet) \
ocaml(CSig) \
ocaml(CUnix) \
ocaml(CamlinternalFormatBasics) \
ocaml(CamlinternalLazy) \
ocaml(Constr) \
ocaml(Context) \
ocaml(Conv_oracle) \
ocaml(Cooking) \
ocaml(Declarations) \
ocaml(Environ) \
ocaml(Esubst) \
ocaml(Evar) \
ocaml(Exninfo) \
ocaml(Float64) \
ocaml(Genlambda) \
ocaml(Hashcons) \
ocaml(Hashset) \
ocaml(Int) \
ocaml(Loc) \
ocaml(Mod_subst) \
ocaml(NCoq_Arith_Factorial) \
ocaml(NCoq_Arith_PeanoNat) \
ocaml(NCoq_Bool_Bool) \
ocaml(NCoq_Bool_Sumbool) \
ocaml(NCoq_Classes_Morphisms) \
ocaml(NCoq_Classes_Morphisms_Prop) \
ocaml(NCoq_Classes_RelationClasses) \
ocaml(NCoq_Floats_FloatAxioms) \
ocaml(NCoq_Floats_FloatClass) \
ocaml(NCoq_Floats_FloatOps) \
ocaml(NCoq_Floats_PrimFloat) \
ocaml(NCoq_Floats_SpecFloat) \
ocaml(NCoq_Init_Datatypes) \
ocaml(NCoq_Init_Decimal) \
ocaml(NCoq_Init_Hexadecimal) \
ocaml(NCoq_Init_Logic) \
ocaml(NCoq_Init_Nat) \
ocaml(NCoq_Init_Number) \
ocaml(NCoq_Init_Peano) \
ocaml(NCoq_Init_Specif) \
ocaml(NCoq_Init_Wf) \
ocaml(NCoq_Lists_List) \
ocaml(NCoq_NArith_BinNat) \
ocaml(NCoq_Numbers_BinNums) \
ocaml(NCoq_Numbers_Cyclic_Abstract_CarryType) \
ocaml(NCoq_Numbers_Cyclic_Int63_PrimInt63) \
ocaml(NCoq_Numbers_Cyclic_Int63_Uint63) \
ocaml(NCoq_PArith_BinPos) \
ocaml(NCoq_Program_Basics) \
ocaml(NCoq_QArith_QArith_base) \
ocaml(NCoq_QArith_Qabs) \
ocaml(NCoq_QArith_Qreduction) \
ocaml(NCoq_Reals_Alembert) \
ocaml(NCoq_Reals_Cauchy_ConstructiveCauchyReals) \
ocaml(NCoq_Reals_Cauchy_ConstructiveCauchyRealsMult) \
ocaml(NCoq_Reals_Cauchy_QExtra) \
ocaml(NCoq_Reals_RIneq) \
ocaml(NCoq_Reals_R_sqrt) \
ocaml(NCoq_Reals_Raxioms) \
ocaml(NCoq_Reals_Rbasic_fun) \
ocaml(NCoq_Reals_Rdefinitions) \
ocaml(NCoq_Reals_Rfunctions) \
ocaml(NCoq_Reals_Rpow_def) \
ocaml(NCoq_Reals_Rpower) \
ocaml(NCoq_Reals_Rsqrt_def) \
ocaml(NCoq_Reals_Rtrigo_def) \
ocaml(NCoq_Reals_Rtrigo_fun) \
ocaml(NCoq_Relations_Relation_Definitions) \
ocaml(NCoq_Structures_OrdersTac) \
ocaml(NCoq_ZArith_BinInt) \
ocaml(NCoq_ZArith_BinIntDef) \
ocaml(NCoq_ZArith_ZArith_dec) \
ocaml(NCoq_ZArith_Zbool) \
ocaml(NCoq_ZArith_Zeven) \
ocaml(NCoq_ZArith_Znat) \
ocaml(NCoq_ZArith_Zorder) \
ocaml(NCoq_ZArith_Zpower) \
ocaml(NCoq_setoid_ring_Ring_theory) \
ocaml(Names) \
ocaml(Nativecode) \
ocaml(Nativeconv) \
ocaml(Nativelib) \
ocaml(Nativevalues) \
ocaml(Opaqueproof) \
ocaml(Parray) \
ocaml(Pp) \
ocaml(Predicate) \
ocaml(Range) \
ocaml(Reduction) \
ocaml(Retroknowledge) \
ocaml(Rtree) \
ocaml(SList) \
ocaml(Sorts) \
ocaml(Stdlib) \
ocaml(Stdlib__Array) \
ocaml(Stdlib__Bigarray) \
ocaml(Stdlib__Buffer) \
ocaml(Stdlib__Complex) \
ocaml(Stdlib__Either) \
ocaml(Stdlib__Format) \
ocaml(Stdlib__Int32) \
ocaml(Stdlib__Int64) \
ocaml(Stdlib__Lazy) \
ocaml(Stdlib__List) \
ocaml(Stdlib__Map) \
ocaml(Stdlib__Obj) \
ocaml(Stdlib__Seq) \
ocaml(Stdlib__Set) \
ocaml(Stdlib__Uchar) \
ocaml(Term) \
ocaml(TransparentState) \
ocaml(UGraph) \
ocaml(Uint63) \
ocaml(Univ) \
ocaml(Unix) \
ocaml(Util) \
ocaml(Values) \
ocaml(Vmbytecodes) \
ocaml(Vmemitcodes) \
ocaml(Vmvalues) \
ocamlx(CamlinternalLazy) \
ocamlx(Nativecode) \
ocamlx(Nativevalues)"

inherit rpm
